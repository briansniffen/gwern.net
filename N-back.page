# The Argument

[Working memory is important stuff](http://en.wikipedia.org/wiki/Working_memory#Working_memory_and_learning) for learning and also just general intelligence.[^jaeggi] It's not too hard to see why working memory could be so important. Working memory boils down to 'how much stuff you can think about at the same time'.

Imagine a poor programmer who has suffered brain damage and has only enough working memory for 1 definition at a time. How could he write anything? To write a correct program, he needs to know simultaneously 2 things - what a variable, say, contains, and what is valid input for a program. But unfortunately, our programmer can know that the variable <tt>foo</tt> contains a string with the input, or he can know that the function 'processInput' uses a string, but he can't remember these 2 things simultaneously! He will deadlock forever, unsure either what to do with this <tt>foo</tt>, or unsure what exactly 'processInput' was supposed to work on.

More seriously, working memory can be useful since it allows one to grasp more of the structure of something at any one time. Commentators on programming write that one of the great challenges of programming, besides accepting the reality that a computer really is just a mindless rule-following machine, is that programming requires one to keep in mind dozens of things and circumstances - any one of which could completely bollix things up. Focus is absolutely essential. One of the characteristics of great programmers is their apparent omniscience. Obsession grants them this ability to *know what they are actually doing*:
> "With programmers, it's especially hard. Productivity depends on being able to juggle a lot of little details in short term memory all at once. Any kind of interruption can cause these details to come crashing down. When you resume work, you can't remember any of the details (like local variable names you were using, or where you were up to in implementing that search algorithm) and you have to keep looking these things up, which slows you down a lot until you get back up to speed."[^spolsky]

## The Silver Bullet

It's not all that obvious, but just about every productivity innovation in computing is about either cutting down on how much a programmer needs to know (eg. garbage collection), or making it easier for him to shuffle things in and out of his 'short term memory'.  Why are some commentators like Jeff Atwood so focused[^atwood] on having multiple [monitors](http://en.wikipedia.org/wiki/Visual_display_unit)? For that matter, why *are* there real studies showing surprisingly large productivity boosts by simply adding a second monitor? It's not like the person is any different afterwards. And arguably multiple or larger monitors come with damaging overheads[^atwood2].

Or, why does Steve Yegge think touch-typing is one of the few skills programmers *must* know (along with reading)? Typing hardly seems very important - it's what you say, not how you say it. The compiler doesn't care if you typed the source code in at 30WPM or 120WPM, after all.

> "I love being able to type that without looking! It's _empowering_, being able to type almost as fast as you can think. Why would you want it any other way?"[^yegge]

The thing is, multiple monitors, touch-typing - they're all about making the external world part of your mind. What's the real difference between having a type signature in your short-term or prominently displayed in your second monitor? What's the real difference between writing a [comment](http://en.wikipedia.org/wiki/Comment_(computer_programming)) in your mind or touch-typing it as fast as you create it?

Just some speed. Just some time. And the more visible that type signature is, the faster you can type out that comment, the larger your 'memory' gets. And the larger your memory is, the more intelligent/productive you can be. (Think of this as the [Extended Mind](http://en.wikipedia.org/wiki/Extended_Mind) thesis as applied to programming!)

But as great as things like garbage collection & touch-typing & multiple monitors are (I am a fan & user of the foregoing), they are still imperfect substitutes. Wouldn't it be better if one could just improve one's short-term/working memory directly? It might be more effective, and certainly would be more portable!

# Training

Unfortunately, in general, IQ/_g_ and memory don't seem to be trainable. Many apparent effects are swamped by exercise or nutrition or by simple practice. They do not [_transfer_](http://en.wikipedia.org/wiki/Transfer_of_learning).

But there are a few exceptions. Lately, I've been reading about and trying out one of them - a game which stresses working memory. It's called [N-back](http://en.wikipedia.org/wiki/N-back).

## N-back

N-back is a turn-based game. In the Brain Workshop version, you are presented with a 3x3 grid in which every turn, a block appears in 1 of the 9 spaces and a letter is spoken aloud.[^details]

### 1-back

In 1-back, the task is to correctly answer whether the *letter* is the same as the previous round, and whether the *position* is the same as the previous round. It can be both. So assuming 'a' means 'same position' and 'l' means 'same sound', you would on every turn type in either 'a', 'l', 'al', or nothing.

This stresses working memory since you need to keep in mind 4 things simultaneously: the position and letter of the previous turn, and the position and letter of the current turn (so you can compare the current letter with the old letter and the current position with the old position). Then on the next turn you need to forget the old position & letter (which are now 3 turns old) and remember the new position and letter. So you are constantly remembering and forgetting and comparing.

### 2-back

But 1-back is pretty easy. The turns come fast enough that you could easily keep the letters in your [phonological loop](http://en.wikipedia.org/wiki/Baddeley%27s_model_of_working_memory#Phonological_loop) and lighten the load on your working memory. Indeed, after 10 rounds or so of 1-back, I usually get 100% unless I forget for a second that it's 1-back and not 2-back (or I simply lose my concentration completely).

The next step up is a doozy: 2-back. In 2-back, you do the same thing as 1-back but as the name suggests, you are instead matching against *2* turns ago. So before you would be looking for repeated letters - 'a a' - but now you need to look for separated letters - 'a b a'. And of course, you can't forget so quickly, since you still need to match against something like 'a b a b a'.

2-back stresses your working memory even more, as now you are remembering 6 things, not 4: 2 turns ago, the previous turn, and the current turn - all of which have 2 salient features. (At 6 items, we're also in the mid-range of estimates for normal working memory capacity.[^size])Worse, the gap between elements is deeply confusing. It's particularly bad when there's repetition involved - if the same square is selected twice with the same letter, you might wind up forgetting both!

So 2-back is where the challenge first really manifests. The good thing is that after about 20 games I started to get the hang of it. (It helped to play a few games focusing only on one of the stimuli, like the letters; this helps you get used to the 'reaching back' of 2-back.) I'm still in just the 80-90% range, but when I start hitting 100%, I'll move on up to 3-back.

## Results

Have I seen any benefits yet? Not really. Thus far it's like meditation: I haven't seen any specific improvements, but it's been interesting just to explore concentration - I've learned that my ability to focus is much less than I thought it was!^[it is very sobering to get 30% scores on something as trivial as 1-back.]

[^size]: See [Wikipedia](http://en.wikipedia.org/wiki/Working_memory#Working_memory_capacity)
[](http://en.wikipedia.org/w/index.php?title=Working_memory&oldid=269488909)on working memory size:

    > "Working memory is generally considered to have limited capacity. The earliest quantification of the capacity limit associated with short-term memory was the ["magical number seven"](http://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two)
 introduced by Miller (1956).[10] He noticed that the memory span of young adults was around seven elements, called chunks, regardless whether the elements were digits, letters, words, or other units. Later research revealed that span does depend on the category of chunks used (e.g., span is around seven for digits, around six for letters, and around five for words), and even on features of the chunks within a category....Several other factors also affect a person's measured span, and therefore it is difficult to pin down the capacity of short-term or working memory to a number of chunks. Nonetheless, Cowan (2001)[12] has proposed that working memory has a capacity of about four chunks in young adults (and fewer in children and old adults)."
[^jaeggi]: TODO: insert ref here to jaeggi paper showing transfer to [_g_](http://en.wikipedia.org/wiki/General_intelligence_factor).
[^spolsky]: Joel Spolsky, ["Where do These People Get Their (Unoriginal) Ideas?"](http://www.joelonsoftware.com/articles/fog0000000068.html)
[^atwood]: Jeff Atwood; ["Multiple Monitors and Productivity"](http://www.codinghorror.com/blog/archives/000012.html), ["The Programmer's Bill of Rights"](http://www.codinghorror.com/blog/archives/000666.html), ["Joining the Prestigious Three Monitor Club"](http://www.codinghorror.com/blog/archives/000740.html), ["Does More Than One Monitor Improve Productivity?"](http://www.codinghorror.com/blog/archives/001076.html) etc.
[^atwood2]: Jeff Atwood, ["The Large Display Paradox"](http://www.codinghorror.com/blog/archives/000928.html)
[^yegge]: Steve Yegge, ["Programming's Dirtiest Little Secret"](http://steve-yegge.blogspot.com/2008/09/programmings-dirtiest-little-secret.html)
[^details]: There are any number of variants: the NATO phonetic alphabet, piano keys, etc. And Brain Workshop has any number of modes, like 'Arithmetic N-back' (which concept scares me), so please accept that this is a very summarized description.