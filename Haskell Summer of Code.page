---
description: A retrospective of 5 years of SoC, w/lessons learned
...

As part of Google's [Summer of code](!Wikipedia "Google Summer of Code") [program](http://code.google.com/soc/), they sponsor 5-10 [projects for Haskell](http://hackage.haskell.org/trac/summer-of-code/).

The Haskell Summer of Codes have often produced excellent results, but how excellent is excellent? Are there any features or commonalities between successful projects or unsuccessful ones?

These questions are particularly important with SoC 2011 just a few months away.^[Students apply in late March.]

## Example retrospective: Debian

In 2009, a blogger & Debian developer has produced [a](http://www.milliways.fr/2009/01/20/debian-2008-where-now-1/) [three](http://www.milliways.fr/2009/01/28/debian-2008-where-now-2/) [part](http://www.milliways.fr/2009/02/02/debian-2008-where-now-3/) retrospective series on the Debian Summer of Code projects.

The results are interesting: some projects were a failure and the relevant student drifted away and had little to do with Debian again; and some were great successes. I don't discern any particular lessons there, except perhaps one against hubris or filling unclear needs. Let's see whether that holds true of Haskell.

## Haskell retrospective

Haskell wasn't part of the first Summer of Code in 2005, but it was accepted for 2006. We start there.

### 2006

The 2006 [homepage](http://hackage.haskell.org/trac/summer-of-code/wiki/SoC2006) lists the following projects:

- ["Fast Mutable Collection Types for Haskell"](http://hackage.haskell.org/trac/summer-of-code/ticket/61); Caio Marcelo de Oliveira Filho, mentored by Audrey Tang

    **Unsuccessful**. This ultimately resulted in the [HsJudy](!Hackage) library ('fast mutable collection' here meaning 'array'). HsJudy was apparently used in Pugs at one time, but no more.
- ["Port Haddock to use GHC"](http://hackage.haskell.org/trac/summer-of-code/ticket/44); David Waern, mentored by Simon Marlow

    **Successful**. Haddock has used the GHC API ever since.[^complaints]
- ["A model for client-side scripts with HSP"](http://hackage.haskell.org/trac/summer-of-code/ticket/54); Joel Björnson, mentored by Niklas Broberg

    **Successful?** Was initially unsuccessful, but seems to've been picked up again.
- "GHCi based debugger for Haskell"; José Iborra López, mentored by David Himmelstrup

    **Successful**. The [GHCi debugger](http://www.haskell.org/ghc/docs/latest/html/users_guide/ghci-debugger.html) was accepted into GHC HEAD, and is in production use.
- ["HaskellNet"](http://hackage.haskell.org/trac/summer-of-code/ticket/30); Jun Mukai, mentored by Shae Erisson

    **Unsuccessful**. HaskellNet is dead, was noted to be ["uncompleted"](http://hackage.haskell.org/trac/summer-of-code/ticket/1574), and none of it has propagated elsewhere. (I'm not entirely sure what happened with the HaskellNet code - I know of [two](https://patch-tag.com/r/wrwills/HaskellNet/home) [repos](http://stuff.mit.edu/afs/sipb/project/suez/src/haskell/haskellnet/), but that's about it.) Shae tells me that this poor uptake is probably due to a lack of advertising, and not any actual defect in the HaskellNet code.
- ["Language.C - a C parser written in Haskell"](http://hackage.haskell.org/trac/summer-of-code/ticket/1545); Marc van Woerkom, mentored by Manuel Chakravarty

    **Unsuccessful**. According to [Don Stewart's outline](http://www.haskell.org/pipermail/haskell-cafe/2007-February/022509.html) of the 2006 SoC, this project was not completed.
- ["Implement a better type checker for Yhc"](http://hackage.haskell.org/trac/summer-of-code/ticket/81); Leon P Smith, mentored by Malcolm Wallace

    **Unsuccessful**. See the Language.C SoC
- ["Thin out cabal-get and integrate in GHC"](http://hackage.haskell.org/trac/summer-of-code/ticket/3); Paolo Martini, mentored by Isaac Jones

    **Successful**. Code lives on as [cabal-install](!Hawiki), which we all know and love.
- "Storable a => ByteString a"; Spencer Janssen, mentored by Don Stewart

    **Successful**? (Again, per Don.) Currently exists as [storablevector](!Hackage), with [20 reverse dependencies](http://bifunctor.homelinux.net/~roel/cgi-bin/hackage-scripts/revdeps/storablevector-0.2.7#indirect).

4 successful; 2 unsuccessful; and 2 failures.

### 2007

The [2007 homepage](http://hackage.haskell.org/trac/summer-of-code/wiki/SoC2007) lists:

- ["Darcs conflict handling"](http://replay.waybackmachine.org/20071203063254/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=647C914C97658198); Jason Dagit, mentored by David Roundy

    **Successful**. The work was successful in almost completely getting rid of the exponential conflict bug, and has been in released Darcs for years
- ["Automated building of packages and generation of Haddock documentation"](http://replay.waybackmachine.org/20071201141912/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=D505A03B8B64C3BF); Sascha Böhme, mentored by Ross Paterson

    **Successful**. The auto build and doc generation are long-standing and very useful parts of Hackage.
- ["Rewrite the typechecker for YHC and nhc98"](http://replay.waybackmachine.org/20071203042207/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=AB859DA837B7BDCD); Mathieu Boespflug, mentored by Malcolm Wallace

    **Successful**? According to the TMR writeup, the type-checker code has made it into YHC. (I add a question mark because YHC is so little used.)
- ["Cabal Configurations"](http://replay.waybackmachine.org/20071201115804/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=21BCDEABD117783D); Thomas Schilling, mentored by Michael Isaac Jones

    **Successful**. Cabal configurations are very useful for enabling/disabling things and are extremely common in the wild.
- ["Update the Hat tracer"](http://replay.waybackmachine.org/20071201121817/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=637BFC2B6B13D512); Kenn Knowles, mentored by Malcolm Wallace

    **Unsuccessful**. The update apparently happened, since the [Hat homepage](http://www.cs.york.ac.uk/fp/ART/) says "Version 2.06 released 2nd Oct 2008", but it is [described](http://www.cs.york.ac.uk/fp/ART/download.html) as unmaintained, and I can't seem to find any examples of people actually using Hat.
- ["Generalizing Parsec to ParsecT and arbitrary input (ByteStrings)"](http://replay.waybackmachine.org/20071201123144/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=B97EF4562EF3B244); Paolo Martini, mentored by Philippa Jane Cowderoy

    **Successful?**. The performance is still so terrible that few people use it.
- ["Shared Libraries for GHC"](http://replay.waybackmachine.org/20090504093628/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=D0137F8B637176F1); Clemens Fruhwirth, mentored by Simon Marlow

    **Successful**. The situation is unclear to me, but I know that for some period dynamic linking worked for some platforms. However, it's 2010 and I still have static linking, although GHC 6.12 apparently gets dynamic linking; so I'm going to chalk this one up as a mixed success.
- ["Libcurl"](http://replay.waybackmachine.org/20080204074446/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=D4DEE221DAC4E810); Mieczysław Bąk, mentored by Bryan O'Sullivan

    **Unknown** The archived homepage [homepage](http://web.archive.org/web/20070706103752/http://varsztat.com/projects/curl/) and [repo](http://web.archive.org/web/20070708071534/varsztat.com/projects/curl/darcs/) indicate that the package name was [curl](!Hackage) and indeed a [curl](!Wikipedia "cURL") binding of that name exists - but none of the metadata points to Bąk as either author or maintainer; if it is the same package, it is pretty successful with [158 reverse dependencies](http://sparky.haskell.org:8080/package/curl/reverse/all)
- ["Extending GuiHaskell: An IDE for Haskell Hackers"](http://replay.waybackmachine.org/20070813151006/http://code.google.com/soc/2007/haskell/appinfo.html?csaid=152CF82F48143D59); Asumu Takikawa, mentored by Neil David Mitchell

    **Unsuccessful**. GuiHaskell does not exist in any usable form. (The homepage summarizes the situation thusly: ["**Warning**: This project is fragile, unfinished, and I do not recommend that anyone tries using it."](http://www-users.cs.york.ac.uk/~ndm/guihaskell/))

6 successes; 2 unsuccessful; 1 unknown.

#### See also

- [The Monad.Reader's](!Hawiki "The Monad Reader") [issue 9](http://www.haskell.org/wikiupload/5/5d/TMR-Issue9.pdf) covers SoC projects
- <http://www.serpentine.com/blog/2007/04/12/haskellorg-and-googles-summer-of-code/>

### 2008

The [2008 homepage](http://hackage.haskell.org/trac/summer-of-code/wiki/SoC2008) isn't kind enough to list all the projects, but it does tell us that only 7 projects were accepted by Google.

So we can work from the [code.google.com](http://code.google.com/p/google-summer-of-code-2008-haskell/downloads/list) page which lists 6:

- "C99 Parser/Pretty-Printer"; by Benedikt Huber, mentored by Iavor Diatchki

    **Successful**. The first try failed, but the second won through, and now people are doing things like [parsing the Linux kernel](http://corp.galois.com/blog/2008/9/17/parsing-the-linux-kernel-with-haskell-experience-with-langua.html) with it.
- ["GMap - Fast composable maps"](http://hackage.haskell.org/trac/summer-of-code/ticket/1560); by Jamie Brandon. mentored by Adrian Charles Hey

    **Unsuccessful**. GMap is on [Hackage](http://hackage.haskell.org/packages/archive/pkg-list.html), but there are [0 users](http://sparky.haskell.org:8080/package/gmap/reverse/all) after 3 years.
- "Haskell API Search"; Neil Mitchell, mentored by Niklas Broberg

    **Successful**. The improved performance and search capability have made it into [Hoogle](!Hackage "hoogle") releases, and Hoogle is one of the more popular Haskell applications (with [1.7m web searches](http://neilmitchell.blogspot.com/2011/01/hoogle-at-17-million-searches.html)).
- ["Cabal 'make-like' dependency framework"](http://replay.waybackmachine.org/20080616045128/http://code.google.com/soc/2008/haskell/appinfo.html?csaid=56D60241D77CA94C); Andrea Vezzosi, mentored by Duncan Coutts

    **Unsuccessful**. ([His code](http://code.haskell.org/~Saizan/cabal/) [wound](http://code.haskell.org/hbuild/) [up](http://vezzosi.blogspot.com/2008/09/even-if-this-blog-has-been-silent-since.html) becoming [hbuild](http://hackage.haskell.org/trac/hackage/wiki/HBuild), which is not on Hackage or apparently used by anyone.)
- ["GHC plugins"](http://replay.waybackmachine.org/20080501130545/http://code.google.com/soc/2008/haskell/appinfo.html?csaid=69C2ABD1E013EE0C); Maximilian Conroy Bolingbroke, mentored by Sean Seefried

    **Unsuccessful**? As of [January 2010](http://webcitation.org/5tC0nSnqc), the patch adding plugins functionality has yet to be accepted & applied; as of February 2011, the [ticket](http://hackage.haskell.org/trac/ghc/ticket/3843) remains open and the code unmerged. The code is apparently not yet bitrotten by the passage of 3 years but how long can its luck last?
- "Data parallel physics engine"; Roman Cheplyaka, mentored by Manuel M. T. Chakravarty

    **Unsuccessful**. It seems to be finished but no use made of the actual engine that I can see mentioned on the [engine's blog](http://physics-dph.blogspot.com/). (I would give reverse dependency statiscs, but [Hpysics](!Hawiki) seems to have never been uploaded to Hackage.)
- "GHC API"; Thomas Schilling, mentored by Simon Marlow <!-- http://code.google.com/soc/2008/haskell/appinfo.html?csaid=4189AF2C8AE5E25A -->

    **Unsuccessful**. Schilling's fixes went in, but they were in general minor changes (like adding the GHC monad) or bug-fixes; the GHC API remains a mess.

2 successful, 5 unsuccessful.

#### Don Stewart's view

[Don Stewart writes](http://www.haskell.org/pipermail/haskell-cafe/2009-February/055531.html) in reply to the foregoing:

> "We explicitly pushed harder in 2008 to clarify and simplify the goals of the projects, ensure adequate *prior Haskell experience* and to focus on libraries and tools that directly benefit the community.
>
> And our success rate was much higher.
>
> So: look for things that benefit the largest number of Haskell developers and users, and from students with proven Haskell development experience. You can't learn Haskell from zero on the job, during SoC."

#### See also

- The Monad.Reader's [Issue 12](http://www.haskell.org/wikiupload/f/f0/TMR-Issue12.pdf)

### 2009

5 projects were [accepted](http://socghop.appspot.com/org/home/google/gsoc2009/haskell) this year; Darcs tried to apply in its own right was rejected.

In general, these looked good. Most of them will be widely useful -- especially the Darcs and Haddock SoCs -- or address longstanding complaints (many criticisms of laziness revolve around how unpredictable it makes memory consumption). The only one that bothers me is the EclipseFP project. I'm not sure Eclipse is common enough among Haskellers or potential Haskellers to warrant the effort^[In the [2010 survey](http://blog.johantibell.com/2010/08/results-from-state-of-haskell-2010.html) of Haskellers, 3% reported ever using Eclipse for Haskell programming. In the [2011 survey](http://blog.johantibell.com/2011/08/results-from-state-of-haskell-2011.html), 4% did.], but at least the project is focused on improving an existing plugin than writing one _ab initio_. The 5 were:

- ["Optimising Darcs for medium to large repositories"](http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2009/haskell/t124022467805); by Petr Ročkai; mentored by Eric Kow

     **Unknown**. [hashed-storage](http://hackage.haskell.org/package/hashed-storage) exists and is used in Darcs, but from watching the bugtracker traffic, it's unclear whether Darcs saw a net gain from it.
- ["haskell-src-exts -> haskell-src"](http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2009/haskell/t124022467962); by Niklas Broberg; mentored by Neil Mitchell

    **Successful**. Niklas added a large number of [patches](http://google-summer-of-code-2009-haskell.googlecode.com/files/Niklas_Broberg.tar.gz) but it's unclear to mean what practical benefit it adds besides handling comments now (which was useful for hlint). Speaking practically, [haskell-src](http://sparky.haskell.org:8080/package/haskell-src/reverse/all) has 104 reverse dependencies, and [haskell-src-exts](http://sparky.haskell.org:8080/package/haskell-src-exts/reverse/all) has 223; so the latter seems to have indeed surpassed its predecessor.
- ["Haddock improvements"](http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2009/haskell/t124022468112); by Isaac Dupree; mentored by David Waern

    **Successful?**. Dupree's [patches](http://google-summer-of-code-2009-haskell.googlecode.com/files/IsaacA_Dupree.tar.gz) have been applied to head and apparently make cross-package links [usually work](http://haddock2009.wordpress.com/category/cross-package-documentation/).
- ["Improving space profiling experience"](http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2009/haskell/t124022468245); by Gergely Patai; mentored by Johan Tibell

    **Successful**. [hp2any](http://www.haskell.org/haskellwiki/Hp2any) seems quite alive and usable.
- ["Extend EclipseFP functionality for Haskell"](http://socghop.appspot.com/gsoc/student_project/show/google/gsoc2009/haskell/t124022468390); by Thomas ten Cate; mentored by Thomas Schilling

    **Unsuccessful**. See [Cate's summing-up](http://eclipsefp.wordpress.com/2009/08/25/endgame/).

3 successful, 1 unknown, 1 unsuccessful.

### 2010

[7 projects](http://donsbot.wordpress.com/2010/04/26/the-7-haskell-projects-in-the-google-summer-of-code/) were accepted:

- [Improvements to Cabal's test support](http://webcitation.org/5tC0nXXN6); Thomas Tuegel, mentored by Johan Tibell

    **Successful**? The functionality is now in a released version of `cabal-install` and a number of packages use the provided test syntax.^[As of 18 March 2011, I have local copies of 8 repositories which seem to make use of the new syntax: `angle, cabal, concurrent-extra, hashable, rrt, safeint, spatialIndex, unordered-containers, wai-app-static`.] <!-- TODO: update using shell command in ~/bin: find . -name "*.cabal" -exec fgrep --files-with-matches --ignore-case 'test-suite ' {} \; | fgrep -v share | fgrep -v 'abal/tests/' | sort -->
- [Infrastructure for a more social Hackage 2.0](http://webcitation.org/5tC0nYPyJ); Matthew Gruen, mentored by Edward Kmett

    **Unknown**. [Gruen's blog](http://cogracenotes.wordpress.com/) was last updated October 2010, and Hackage still hasn't switched over and gotten the new features & benefit of the rewrite. But the code exists and there is a running [public demo](http://sparky.haskell.org:8080/), so this may yet be a success.
- [A high performance HTML generation library](http://webcitation.org/5tC0nYXFR); Jasper Van der Jeugt, mentored by Simon Meier

    **Successful** [blaze-html](!Hackage) has been released and is actively developed; version 0.4.0.0 has [50 total reverse dependencies](http://sparky.haskell.org:8080/package/blaze-html/reverse/all) and [blaze-builder](!Hackage) has [97 reverse dependencies](http://sparky.haskell.org:8080/package/blaze-builder/reverse/all) though there's much overlap. (This site is built on [hakyll](!Hackage), which uses blaze-html.)
- [Improvements to the GHC LLVM backend](http://webcitation.org/5tC0nYbNw); Alp Mestanogullari, mentored by Maximilian Bolingbroke

    **Unsuccessful**. Dan Peebles in #haskell says that Alp's SoC never got off the ground when his computer died at the beginning of the summer; with nothing written or turned in, this can't be considered a successful SoC, exactly. But could it have been?
    The LLVM backend is still be on track to become the default GHC backend^[A development that surprises me, since I had been under the impression that most GHC work ultimately winds up being scrapped or abandoned like [Liskell](http://www.liskell.org/) or [Mobile Haskell](http://www.haskell.org/haskellwiki/Research_papers/Parallelism_and_concurrency#Mobile_Haskell).], suggesting that it's popular in GHC HQ (and the [DDC](http://disciple.ouroborus.net/) dialect), and it seems to also be popular among [Haskell bloggers](http://www.reddit.com/r/haskell/search?q=LLVM&restrict_sr=on). The scope is restricted to taking a working backend and optimizing it. In general, it seems like a decent SoC proposal, and better than the next one:
- [Implementing the Immix Garbage Collection Algorithm](http://webcitation.org/5tC0naN8O); Marco Silva, mentored by Simon Marlow

    **Unsuccessful**. The GHC repository history, as of 4 February, contains no patches adding Immix GC. Silva writes in his blog's [SoC summary](http://marcotmarcot.wordpress.com/2010/08/20/immix-on-ghc-summer-of-code-final-report/) that "Although the implementation is not mature enough to be included in the repository, I’m happy with the state it is now. I think it’s a good start, and I plan to keep working on it." (His [new blog](http://marcot.eti.br/blog/), begun in August 2010, contains no mention of Immix work.) The [GHC wiki](http://hackage.haskell.org/trac/ghc/wiki/Commentary/Rts/Storage/GC/Immix) says that "it's functional, doesn't have known bugs and gets better results than the default GC in the nofib suite. On the other hand, it gets worse results than the default GC for the nofib/gc suite."
- ["Improving Darcs Performance"](http://webcitation.org/5wV5g2TP2); Adolfo Builes, mentored by Eric Kow

    **Unknown**. This replaced a previous proposal to write a Haskell binding to the [GObject](!Wikipedia) library, which never started. Looking through the Darcs repository history, I see a number of new tests related to the global cache, but no major edits to cache-related modules.
- [Improving Darcs's network performance](http://webcitation.org/5tC0naNuM); Alexey Levan, mentored by Petr Rockai

    **Successful**. Levan divided his SoC into 2 parts, improving Darcs's performance in fetching the many small files that make up a repository's revision history, and writing 'a smart server that can provide clients with only files they need in one request'. The 'smart server' seems to have been abandoned as not being worthwhile, but the fetching idea was implemented and will be in the [2.8 release](http://blog.darcs.net/2010/11/coming-in-darcs-28-new-features.html).

    The [basic idea](http://wiki.darcs.net/Internals/OptimizeHTTP) is to combine all the small files into a single [tarball](!Wikipedia "tar (file format)") which can be downloaded at full speed, and avoid the latency of many roundtrips. The 2.8 release description claims that when `darcs optimize --http` was used on the Darcs repository, a full download went from 40 minutes to 3 minutes. This feature would not be enabled by default, but the gain for larger repositories would be large enough that I feel comfortable classifying it as a successful SoC.

#### Predicting 2010 results

Borrowing from our [3 cardinal sins](#lessons-learned) of SoCs, what predictions can we make?

Most of the 7 SoCs are laudably focused on an existing application. You don't need to justify a speedup of normal Darcs operations because there's an installed base of Darcs users that will benefit; a new GC for GHC or a LLVM backend will benefit every Haskeller; better Cabal support for testing may go unused by many package authors who either have no tests or don't want to bother - but a fair number will bother, and it will get maintained as part of Cabal, and similarly for the Hackage 2.0 project.

The Immix GC strikes me as a very challenging summer project; a GC is one of the most low-level pieces of a functional language and is intertwined with all sorts of code and considerations. It would not surprise me if that project wound up just getting a little closer to a working Immix GC but not producing a production-quality GC scheduled to come to compilers near you.

2 in particular concern me as potentially falling prey to sins #2 & 3: the GObject-binder tool, and the high-performance HTML library:

1. Let's assume that the HTML library does wind up as being faster than existing libraries, and as useful - that compromises don't destroy its utility. Who will use it? It will almost surely have an API different enough from existing libraries that a conversion will be painful. There are roughly 42 users of the existing [xhtml](http://bifunctor.homelinux.net/~roel/cgi-bin/hackage-scripts/package/xhtml)-generating library; will their authors wish to embrace a cutting-edge infant library? Is HTML generation even much of a bottleneck for them? (Speaking just for Gitit, Pandoc and its HTML generation are not usually a bottleneck.)
2. The case against the GObject project makes itself; GTK2Hs isn't as widely used as one would expect, and this seems to be due to the difficulty of installation and its general complexity. So there are few users of existing libraries; would there be more users for those libraries no one has bothered to bind nor yet clamored for? (This project might fall afoul of sin #1, but I do not know how difficult the GObject data is to interpret.)

#### 2010 results

As of February 2010, I grade the 7 SoC for 2010 as follows: 3 successes, 2 unknown, and 2 unsuccessful. (One unknown, Hackage 2.0, will probably turn out to be a success once it goes live as the main Hackage site.) As one would hope, the results seem to be better than the results for 2008 or 2009.

Of my original predictions, I think I was right about the Immix GC & GObject & Darcs network optimization, semi-right about Hackage 2.0 & Cabal testing support, somewhat wrong about the LLVM work, and completely wrong about the HTML/`blaze` SoC. (I am not sure why I was wrong about the last, and don't judge myself harshly for not predicting the [exogenous](!Wikipedia) failure of the LLVM SoC.)

### 2011

[Haskell.org](http://www.google-melange.com/gsoc/org/google/gsoc2011/haskell) got 7 projects again for 2011. They are:

1. ["Improve EclipseFP"](http://www.google-melange.com/gsoc/project/google/gsoc2011/serras/50001); Alejandro Serrano, mentored by Thomas Schilling

    > "Eclipse is one of the most popular IDEs in our days. EclipseFP is a project developing a plug-in for it that supports Haskell. Now, it has syntax highlighting, integration of GHCi and supports some properties of Cabal files. My idea is to extend the set of tools available, at least with:
    > - Autocompletion and better links to documentation,
    > - A way to run unit tests within Eclipse,
    > - More support for editing Cabal files visually, including a browser of the available packages."
2. ["Simplified OpenGL bindings"](http://www.google-melange.com/gsoc/proposal/review/google/gsoc2011/pastorn/1); Alexander Göransson, mentored by Jason Dagit

    > "Modernize and simplify OpenGL bindings for Haskell. Focus on safety, shaders and simplicity."
3. ["Interpreter Support for the Cabal-Install Build Tool"](http://www.google-melange.com/gsoc/proposal/review/google/gsoc2011/anklesaria/1); anklesaria, by Duncan Coutts

    > "This project aims to provide cabal-install with an 'repl' [[`cabal ghci`](http://hackage.haskell.org/trac/hackage/ticket/382)?] command by adding to the Cabal API. This would allow package developers to use GHCi and Hugs from within packages requiring options and preprocessing from Cabal. "
4. ["Convert the text package to use UTF-8 internally"](http://www.google-melange.com/gsoc/project/google/gsoc2011/jaspervdj/15001); Jasper Van der Jeugt, by Edward Kmett

    > "For Haskell projects handling unicode text, the Text library offers both speed and simplicity-of-use. When it was written, benchmarks indicated that UTF-16 would be a good choice for the internal encoding in the library. However, these (rather artificial) benchmarks were did not take into account the time taken to
    > 1. decode the "Real World" data and
    > 2. encode it to write it back.
    >
    > I propose to
    > 1. benchmark and
    > 2. convert the library to UTF-8 if it is a faster choice for "Real World"-applications."
5. ["Build multiple Cabal packages in parallel"](http://www.google-melange.com/gsoc/project/google/gsoc2011/refold/31001); Mikhail Glushenkov, by Johan Tibell

    > "Cabal is a system for building and packaging Haskell libraries and programs. This project's aim is to augment Cabal with support for building packages in parallel. Many developers have multi-core machines, but Cabal runs the build process in a single thread, only making use of one core. If the build process could be parallelized, build times could be cut by perhaps a factor of 2-8, depending on the number of cores and opportunity of parallel execution available."
6. ["Darcs Bridge"](http://www.google-melange.com/gsoc/proposal/review/google/gsoc2011/owst/1); Owen Stephens, by Ganesh Sittampalam

    > "My proposed project is to create a generic bridge that will enable easy interoperability and synchronisation between Darcs and other VCSs. The bridge will be designed to be generic, but the focus of this project will be Darcs2 ↔ Git and Darcs2 ↔ Darcs1. The bridge should allow loss-less, correct conversion to and from Darcs repositories, allowing users to use the tool that suits them and their project best, be that Darcs as it currently exists, or another tool."
7. ["Darcs: primitive patches version 3"](http://www.google-melange.com/gsoc/proposal/review/google/gsoc2011/mornfall/1) ([expanded blog description](http://web.mornfall.net/blog/soc_reloaded:_darcs_primitive_patches_version_3.html)); Petr Ročkai, by Eric Kow

    > "Darcs, a revision control system, uses so-called patches to represent changes to individual version-controlled files, where the 'primitive' patches are the lowest level of this representation, capturing notions like 'hunks' (akin to what `diff(1)` produces), token replace and file and directory addition/removal. I propose to implement a different representation of these primitive patches, hoping to improve both performance and flexibility of darcs and to facilitate future development."

#### Predicting 2011 results

Which seem like good selections for SoC, and which seem less appropriate?

1. \#1 is the *second* EclipseFP SoC, after a failed [2009](#2009) attempt; why should we think this one will do better?
2. With #2, the fear is that the result will not be used; there is an OpenGL binding already, after all, and I haven't heard that there are very many people who want to do OpenGL graphics but were deterred by complexity or danger in it.
3. `cabal ghci` is a long-request Cabal feature, and it sounds as if all the groundwork and experimentation has been done. I have no problem with this one.
4. Benchmarking sounds quite doable, and `text` is increasingly used; but if I had to criticize it, I would criticize it for *under*ambition, for sounding too modest and not a good use of a slot.
5. \#5 is a second crack at the parallel compilation problem (building on a [2008](#2008) SoC) and is troubling in the same way the EclipseFP SoC is.
6. There are multiple existing Darcs->other VCS programs, so the task is quite doable. An escape hatch would be very valuable for users (even if rarely used).
7. This one sounds tremendously speculative to me.

     I respect Ročkai & Kow, but in idling on `#darcs` and reading the occasional Darcs-related emails & Reddit posts, I don't know of any fully worked out design for said patch design, which makes it a challenging theoretical problem (patch theory being general & powerful), a major implementation issue (since the existing primitive patches are naturally assumed all throughout the Darcs codebase), and difficult to verify that it will not backfire on users or legacy repositories. All in all, #7 sounds like the sort of project where the *best* case scenario is a repository branch/fork somewhere that few besides the author understands, which is better on some usecases and worse on others, but not actually in general use. That might be a success by the Darcs's team's lights, but not in the sense I have been using in this history.

To summarize my feelings:

- I predict #2 & #7 will likely fail
- I would be mildly surprised if both #3 & #5 succeed^[Since they're challenging and long-outstanding Cabal features], but I expect at least one of them to succeed. Which, I am not sure.
- \#1 seems a bit doubtful but is more likely to succeed (because presumably most of the heavy lifting was done previously). I expect with confidence that #4 & #6 will succeed.

<!--
#### 2011 results

1. "Improve EclipseFP"; Alejandro Serrano, mentored by Thomas Schilling

   Successful? http://serras-haskell-gsoc.blogspot.com/2011/08/end-of-summer.html

   > "One of the tasks I've also done during the summer is building a new webpage for EclipseFP. You can find it in <http://eclipsefp.github.com/>. In the next days, a new release of EclipseFP with all the changes I've done though the summer will be made available."
2. "Simplified OpenGL bindings"; Alexander Göransson, mentored by Jason Dagit
3. "Interpreter Support for the Cabal-Install Build Tool"; anklesaria, by Duncan Coutts

    "Ending GSoC" http://lambdasandwich.blogspot.com/2011/08/ending-gsoc.html
4. "Convert the text package to use UTF-8 internally"; Jasper Van der Jeugt, by Edward Kmett
5. "Build multiple Cabal packages in parallel"; Mikhail Glushenkov, by Johan Tibell

    Successful? http://dissocial.st/blog/2011-08-22-GSoC-Final

    1. First of all, the parallel patches need to be merged into the mainline repository, which may take some time.
    2. Next, there are possibilities for improvement. Current version of the code works at the package granularity (a package is always built by a single thread), which doesn’t work so well for giant packages like Agda and Darcs. We can get better speedup by ditching ghc --make and instead compiling each module separately with ghc -c; the dependency graph can be extracted with ghc -M. This should be also integrated with the build command.
    3. Third, there is the question of other compilers (e.g. Hugs). At the moment, only GHC is supported by the parallel install code, but it should be possible to adapt it to work with other compilers. This is not considered a top priority, though.

    but, not very fast? asked at http://dissocial.st/blog/2011-08-22-GSoC-Final#comment-293233466
6. "Darcs Bridge"; Owen Stephens, by Ganesh Sittampalam
7. "Darcs: primitive patches version 3"; Petr Ročkai, by Eric Kow

    http://web.mornfall.net/blog/soc_reloaded:_outcomes.html
-->

### Lessons learned

So, what lessons can we learn from the past years of SoCs? It seems to me like there are roughly 3 groups of explanations for failure. They are:

1. _Hubris_. GuiHaskell is probably a good example; it is essentially a bare-bones IDE, from its description. It is expecting a bit much of a single student in a single summer to write *that*!
2. _Unclear use_. HsJudy is my example here. There are already so many arrays and array types in Haskell! What does HsJudy bring to the table that justifies a FFI dependency? Who's going to use it? Pugs initially did apparently, but perhaps that's just because it was there - when I looked at Pugs/HsJudy in 2007, certainly Pugs had no need of it. (The data parallel physics engine is probably another good example. Is it just a benchmark for the GHC developers? Is it intended for actual games? If the former, why is it a SoC project, and if the latter, isn't that a little hubristic?)
3. _Lack of propaganda_. One of the reasons Don Stewart's bytestring library is so great is his relentless evangelizing, which convinces people to actually take the effort to learn and use Bytestrings; eventually by network effects, the whole Haskell community is affected & improved[^academic]. Some of these SoC projects suffer from a distinct lack of community buy-in - who used HaskellNet? Who used Hat when it was updated? Indifference can be fatal, and can defeat the point of a project. What good is a library that no one uses? These aren't academic research projects which accomplish their task just by existing, after all. They're supposed to be useful to real Haskellers.

### Future SoC proposals

There are 2 major collections of ideas for future SoC projects, aside from the general frustrations expressed in the [annual survey](http://nickknowlson.com/blog/2011/09/12/haskell-survey-categorized-weaknesses/):

- The [Haskell proposals](http://www.reddit.com/r/haskell_proposals/top/?t=all) [subreddit](http://www.urlesque.com/2011/01/06/whats-a-subreddit-how-reddit-works/), with ideas ranked by popularity
- the [Haskell Summer of Code](http://hackage.haskell.org/trac/summer-of-code/report/1) [trac](!Wikipedia)

Let's look at the first 12 and see whether they're good ideas, bad ideas, or indifferent.

1. [port GHC to the ARM architecture](http://www.reddit.com/r/haskell_proposals/comments/7ihso/an_arm_port_of_ghc_that_works_so_we_can_program/): It would be a good thing if we could easily compile our Haskell programs for ARM, which is used in many cellphones, but an even better idea would [using the LLVM backend](http://www.reddit.com/r/haskell_proposals/comments/b7ol7/use_the_llvm_backend_to_turn_ghc_into_a/) to [crosscompile](!Wikipedia). It would be somewhat tricky, but LLVM already has fairly solid [cross-compilation support](http://wiki.llvm.org/HowTo:_LLVM-based_cross_compiler), and making GHC capable of using it seems like a reasonable project for a student to tackle.
2. ["Implement overlap and exhaustiveness checking for pattern matching"](http://hackage.haskell.org/trac/summer-of-code/ticket/1579): this seems both quite challenging and also a specialized use. I use [GADTs](http://haskell.org/haskellwiki/Generalised_algebraic_datatype) rarely, but I suspect that those writing GADT code rarely make overlap or omission errors.
3. [Incremental garbage collection](http://www.reddit.com/r/haskell_proposals/comments/d1ksj/incremental_garbage_collection_so_i_can_make_some/): this *may* be a good idea depending on how much of the code was already written. But I fear that this would go the way of the Immix GC SoC and would be a bad idea.
4. ["ThreadScope with custom probes"](http://hackage.haskell.org/trac/summer-of-code/ticket/1584): I don't understand the description and can't judge it.
5. ["A simple, sane, comprehensive Date/Time API"](http://www.reddit.com/r/haskell_proposals/comments/b8rlh/a_simple_sane_comprehensive_datetime_api/): having puzzled over date-time libraries before, I'm all for this one! It's a well-defined problem, within the scope of a summer, and meets a need. Its only problem is that it doesn't sound sexy or cool.
6. ["Combine Threadscope with Heap Profiling Tools"](http://hackage.haskell.org/trac/summer-of-code/ticket/1585): Uncertain. Going by the [Arch download statistics](http://www.galois.com/~dons/arch-haskell-status.html), Threadscope is downloaded more often than one would expect, so perhaps integration would be useful.
7. ["Haddock with embedded wiki feature, a la RWH, so we can collaborate on improving the documentation"](http://www.reddit.com/r/haskell_proposals/comments/7qnwq/haddock_with_embedded_wiki_feature_a_la_rwh_so_we/): This is a bad idea mostly because there are so many diverging ideas and possible implementations - it's just not clear what one would do. Is it some sort of Haddock server? A Gitit wiki with clever hooks? Some lightweight in-browser editor combined with Darcs?
8. ["HTTP Library Replacement"](http://hackage.haskell.org/trac/summer-of-code/ticket/1122): A good idea, assuming the linked attempts and alternate libraries haven't already solved the issue.
9. ["Using Type Inference to Highlight Code *Properly*"](http://www.reddit.com/r/haskell_proposals/comments/biaew/using_type_inference_to_highlight_code_properly/): The difficult part is accessing the type information of an identifier inside a GHCi sessions - a problem probably already solved by [scion](!Hackage). Colorizing the display of a snippet is trivial. So this would make a bad SoC.
10. ["Transformation and Optimisation Tool"](http://hackage.haskell.org/trac/summer-of-code/ticket/1536): This initially sounds attractive, but previous refactoring tools have been ignored. The tools that have gotten uptake are things like GHC's `-Wall` (which warns about possible semantic issues) and [hlint](!Hackage) (which warns about style issues and redundancy with standard library functions) - not like Hera.
11. ["Webkit-based browser written in Haskell, similar in [plugin] architecture to Xmonad"](http://www.reddit.com/r/haskell_proposals/comments/98vxo/webkitbased_browser_written_in_haskell_similar_in/): This is probably the worst single idea in the whole bunch. A web browser these days is an entire operating system, but worse, one in which one must supply and maintain the userland as well; it is a thankless task that will not benefit the Haskell community (except incidentally through supporting libraries), nor a task it is uniquely equipped for. It is an infinite time sink - the only thing worse than this SoC failing would be it succeeding!
12. ["Add NVIDIA CUDA backend for Data Parallel Haskell"](http://hackage.haskell.org/trac/summer-of-code/ticket/1537): [DPH](!Hawiki "GHC/Data Parallel Haskell") is rarely used; a CUDA backend would be even more rarely utilized; [CUDA](!Wikipedia) has a reputation for being difficult to coax performance out of; and difficulties would likely be exacerbated by the usual Haskell issues with space usage & laziness. (DPH/CUDA use unboxed strict data, but there are interface issues with the rest of the boxed lazy Haskell universe.) All in all, there are many better SoCs.

# External links

It's difficult to quantify how 'useful' a package is; it's easier to punt and ask instead how 'popular' it is. There are a few different sources we can appeal to:

1. Package downloads:

      i. Don Stewart provides, for [Arch Linux](!Wikipedia), [a status page](http://www.galois.com/~dons/arch-haskell-status.html) which includes Arch download numbers
      ii. The [Debian](http://popcon.debian.org/) (and [Ubuntu](http://popcon.ubuntu.com/)) Popularity Contest offers limited popularity data; eg. [xmonad](http://qa.debian.org/popcon.php?package=xmonad)
      iii. some 2006-2009 [Hackage statistics](http://corp.galois.com/blog/2009/3/23/one-million-haskell-downloads.html) are available by [month](http://www.galois.com/~dons/hackage/hackage.html) & [ranking](http://www.galois.com/~dons/hackage/popularity.html); live Hackage statistics is an open [bug report](http://hackage.haskell.org/trac/hackage/ticket/162) which will be closed by Matthew Gruen's Hackage 2.0 (2010 SoC)
2. [Reverse dependencies](http://hackage.haskell.org/trac/hackage/ticket/576) can be examined several ways:

    i. <http://bifunctor.homelinux.net/~roel/hackage/packages/hackage.html>
    ii. <http://sparky.haskell.org:8080/>
    iii. [cabal-query](!Hackage)
    iv. [HackageOneFive](https://github.com/sol/HackageOneFive)
3. Searching for mentions, blog posts, and unreleased packages elsewhere; key sites to search include:

    i. [Haskell subreddit](http://www.reddit.com/r/haskell/)
    ii. [Github](https://github.com/)
    iii. [Google Code](http://code.google.com/)
    iv. the [Haskell wiki](http://haskell.org/haskellwiki/index.php?title=&search=&fulltext=Search)
    v. [Haskell mailing lists](http://dir.gmane.org/index.php?prefix=gmane.comp.lang.haskell)

[^complaints]: I can hear the wankers in the peanut gallery - "Yeah, and it's been buggy ever since!" Hush you. ([Waern's reply](http://www.haskell.org/pipermail/haskell-cafe/2009-February/055500.html).)
[^academic]: Many good and worthwhile projects suffer this fate because of their academic origins. There's no reward for someone who creates a great technique or library and gets the wider community to adopt it as standard. As far as the Haskell community is concerned, one Don Stewart is worth more than a dozen of Oleg Kiselyov; [Oleg's work](http://okmij.org/ftp/) is mindblowingly awesome in quantity and quality, everyone acknowledges, but how often does anyone actually use any of it?

    ([Iteratees](http://okmij.org/ftp/Streams.html) may be the exception; although there are somewhere upwards of [5 implementations](http://john-millikin.com/articles/understanding-iteratees/) by Oleg and others, the original [iteratee](!Hackage) has picked up [4 reverse dependencies](http://bifunctor.homelinux.net/~roel/cgi-bin/hackage-scripts/revdeps/iteratee#direct), its most popular successor [33](http://sparky.haskell.org:8080/package/enumerator/reverse) and iteratees in general may one day become as widely used as bytestrings.)
