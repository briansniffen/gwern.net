<!-- -*- mode: markdown; -*-
When:  Time-stamp: "2009-01-19 20:55:50 gwern"
-->

# Haskell
## Packaging
- <http://www.haskell.org/haskellwiki/Category:Applications>
- Cabalize & upload GF <http://www.cs.chalmers.se/~aarne/GF/>, <http://www.cs.chalmers.se/~aarne/GF/index.html>
- BNF Converter <http://www.cs.chalmers.se/Cs/Research/Language-technology/BNFC/>
- Functional Morphology <http://www.cs.chalmers.se/~markus/FM/>
- WASH <http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/>: HTML and MAIL look particularly useful.
- <http://www.eyrie.org/~zednenem/2004/07/26/hsce>
- <http://www.cs.chalmers.se/~bringert/darcs/>
- <http://www.cs.waikato.ac.nz/Research/fm/amuzed.html>
- Work my way backwards in time from <http://haskell.org/haskellwiki/News/2006>
- Buddha is old; see if there is a darcs: <http://www.cs.mu.oz.au/~bjpop/buddha>
-  <http://n-heptane.com/nhlab/repos/haskell-freetype/>
   <http://n-heptane.com/nhlab/repos/haskell-glx/>
- All of Oleg Kiselyisov's stuff (but ZFS and HList are done)
- HaRe: <http://www.cs.kent.ac.uk/projects/refactor-fp/hare.html>
- Pivotal: <http://www.cs.kent.ac.uk/projects/pivotal/downloads.html>
- Steal Programmatica's stuff: <http://ogi.altocumulus.org/~hallgren/Programatica/cvs.html> and <http://programatica.cs.pdx.edu/>
- dons says track down everything by Mark Jones <http://web.cecs.pdx.edu/~mpj/>
- <http://mail.cs.uu.nl/mailman/listinfo/hut> <https://svn.cs.uu.nl:12443/repos/uust-repo/uuagc/trunk/>
- Zao on #haskell has a largely complete xtris OpenGL client <http://www.acc.umu.se/~zao/Hastris/>. No download available...
- What's up with 'HaskellNet'? <http://darcs.haskell.org/SoC/haskellnet/> and <http://stuff.mit.edu/afs/sipb/project/suez/src/haskell/haskellnet/> It seems to have a good memcached client: <http://sequence.complete.org/node/213>
- Hazakura: <http://web.archive.org/web/20061012042957/http://www.city5.org/haskellprog/hazakura/> & <http://haskell.org/pipermail/haskell/2006-April/017901.html>
- Look at HOOD, or is it too old? <http://www.haskell.org/hood/>
- Petri nets: <http://www.cs.kent.ac.uk/people/staff/cr3/HCPN/>
- 'Frob - an Embedded Domain Specific Language for controlling robots. It is built using the principals of Functional Reactive Programming, as developed by Conal Elliott for the Fran animation system. The current incarnation of Frob is part of the Yampa FRP system.'
- PUre: <http://wiki.di.uminho.pt/twiki/bin/view/Research/PURe/UsingCVS>
- <http://tothepowerofdisco.com/repo/HaskellLibraries/>
- <http://www.cs.kent.ac.uk/people/staff/cr3/toolbox/haskell/FunWorlds/>
- <http://programatica.cs.pdx.edu/House/>
- <http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/Haskell2LaTeX/>
- <http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/Fraskell/> (is this too old?)
- <http://research.microsoft.com/users/daan/ddata.html> (are these already included in Hackage'd libraries?)
- everything on <http://repetae.net/computer/>.
- <http://www.cs.york.ac.uk/fp/darcs/>
- <http://www.cs.york.ac.uk/fp/software.php>
- <http://cdsmith.twu.net/demos/haskell.html>
- <http://www.cs.uu.nl/wiki/Ehc/WebHome>
- Is HTK still worth salvaging? <http://www.informatik.uni-bremen.de/htk/download/INSTALL.BINARY.html#TheSource>
- RDF stuff: <http://www.ninebynine.org/Software/HaskellRDF/RDF/Harp/>
- I've contacted <http://nautilus.cs.miyazaki-u.ac.jp/~skata/MagicHaskeller.html>'s author about packaging it.
- cabalize <http://homepages.cwi.nl/~tromp/cl/cl.html>
- <http://www.haskell.org/hdirect/> too obsolete?
- <https://datura.dylex.net:9947/src/> (particular ztail, set, and Joy compiler; maybe libraries too)
- <http://wxhaskell.sourceforge.net/applications.html>
- [Two games](http://www.maths.tcd.ie/~icecube/2008/11/endless-cavern/)

## Programming

- Extend <http://haskell.org/haskellwiki/Simple_unix_tools> to include more coreutils and maybe QuickCheck tests, and merge into HSH's ShellEquivs. Is there any useful merger of [HSH](http://software.complete.org/software/projects/show/hsh), and [Language.Sh/ShSh](http://code.haskell.org/shsh/)
- look for vector graphics libraries for Haskell; think about cloning DEFCON
- Translate the Lisp from _Metamagical Themas_ into Haskell
- Look into Test.IOSpec <http://www.cs.nott.ac.uk/~wss/repos/IOSpec/>
- Conjure has Int problems on >2gig files - hSeeks on an Int
- Clean up Shellac per -Wall and send patches.
- Split out Cpuperf's Sudo monad and make safer
- hscursesify stuff: ginsu, mage, and minstrel <http://urchin.earth.li/darcs/ian/minstrel/> (We shouldn't have 5 different curses bindings floating around!)
- Clean up the SHA1 mess:
    i. Ginsu: module SHA1 (sha1,  sha1ShowHash, sha1String, sha1HashToBytes)
    ii. HAppS: Kind of similar to Ginsu?
    iii. Conjure: BSD FFI, module Conjure.Utils.SHA1 (sha1 :: ByteString -> ByteString)
    iv. jhc: based on Igloo's original - module Util.SHA1 (sha1String,sha1file,sha1Bytes,hashToBytes,sha1Handle,ABCDE(..),Hash,emptyHash) where
- de-haskell98 everything:
    - Agda.cabal
    - alex.cabal
    - BNFC.cabal
    - test.cabal
    - wash2hs.cabal
    - clustertools.cabal
    - curl.cabal
    - DrIFT.cabal
    - lib-eh-util.cabal
    - FLM.cabal
    - FermatsLastMargin.cabal
    - FLM.cabal
    - Libaddutil.cabal
    - Libfreekick.cabal
    - geniconvert.cabal
    - GPLib.cabal
    - haddock.cabal
    - HAppS-Begin.cabal
    - hat.cabal
    - HaXml.cabal
    - Holumbus-Distributed.cabal
    - Holumbus-MapReduce.cabal
    - Holumbus- Searchengine.cabal
    - hback.cabal
    - hera-ajaxgui.cabal
    - hera-engine.cabal
    - hera.cabal
    - hera-prelude.cabal
    - hfov.cabal
    - hiccup.cabal
    - hinvaders.cabal
    - hledger.cabal
    - HNM.cabal
    - hpodder.cabal
    - hsp-xml.cabal
    - hybrid.cabal
    - idris.cabal
    - ivor.cabal
    - joinhsc.cabal
    - lhc.cabal
    - luna.cabal
    - MissingH.cabal
    - nehe-tuts.cabal
    - numeric-quest.cabal
    - Maint.cabal
    - popenhs.cabal
    - portaudio.cabal
    - Pugs.cabal
    - geniconvert.cabal
    - Shellac-readline.cabal
    - yhc.cabal
- Replace Pandoc's shell scripts with Haskell scripts

## Hackage
- Look into build failures of:
    i. ivor
    ii. mage
    iii. mpdmate
    iv. trhsx
- What backups are Galois keeping of haskell.org _et al_?
- The current Haskell situation on Debian/Ubuntu is untenable. The packages are badly out of date, and the selection is poor. Arch Linux is in much better shape both because dons is so active, and because he has a Cabal->Arch conversion tool. A Cabal->.deb conversion tool would help out a lot. Multiple people have tried this - [John Goerzen](http://darcs.complete.org/), [Magnus Therning](http://therning.org/magnus/archives/458), the Linspire/seereason devs' [cabal-debian](http://src.seereason.com/cabal-debian/) & [auto-builder](http://src.seereason.com/autobuilder/), etc. This mess needs to be straightened out and one quality tool produced.

## XMonad
- Look through my collection of XMonad configuration files. What can be done in XMonad core and XMonadContrib to simplify them?

## Darcs
- Add --pager option to 'darcs changes' --this is a current [bug report](http://bugs.darcs.net/issue1303)
- Fix Darcs' lack of ".darcs" option (instead of "_darcs") --this is a current [bug report](http://bugs.darcs.net/issue129)
- Look into darcswatch - can it be made more memory-efficient and usable on haskell.org?

## Yi
- Needs more syntax highlighting modes, and modes in general. I particularly need
     i. Markdown mode
     ii. Shell mode^[Needed for the many many configuration files which use that style]
     iii. Lisp mode^[If I could switch completely from Emacs, this wouldn't be so important.]
     iv. Wikimarkup (Mediawiki specifically) mode
- [longlines-mode](http://www.gnu.org/software/emacs/manual/html_node/emacs/Longlines.html)[](http://www.emacswiki.org/emacs/LongLines). Absolutely crucial for editing documents that use long lines (such as Markdown or Wikipedia articles). Yi currently displays longlines by wrapping them at the end of the terminal, which both looks ugly and is very hard to navigate or work with.
- [Macros](http://code.google.com/p/yi-editor/issues/detail?id=89). Obviously. If you don't understand why this is a must-have, then you don't understand text editing.
- Spellcheck. See macros - a basic feature. (And ideally a realtime spellcheck, like flyspell; but I could probably live with a manually invoked spellchecker.)
- Persistent state: Yi should remember my previously-opened files, my killring, the last position of the point in a buffer/file etc. Emacs provides this [session](http://www.phys.ufl.edu/docs/emacs/emacs_423.html), and I find it very convenient.

## Gitit
- Use Pandoc's <tt>withProcess</tt> function to implement necessary features:
     i. Signatures: this could be done something like [described here](http://groups.google.com/group/pandoc-discuss/browse_thread/thread/54272f922c80b7b0) - we'd plug in that function to withProcess. Probably we'll first define <tt>@date</tt> to substitute in the current date, so users can go '--Gwern @date@', and then we could work on defining <tt>@sig@</tt> which does all that.
     ii. interwiki links. Currently there's no support for easy linking to a particular site with regular URLs (the paradigmatic case being linking to Wikipedia). We need to parse inside a <tt>Link</tt> and do some URL substitution (content from 'pandoc -w native'). You can see in #3 that we want to replace "wiki:" with, say, "http://en.wikipedia.org/wiki/" - which transforms it to an external link to the right place.

~~~~~~{.haskell .numberLines}
[foo](wiki:bar) -- parses as:
Pandoc (Meta [] [] "")
[ Para [Link [Str "foo"] ("wiki:bar","")] ]
~~~~~~

- Caching needs improvements. Perhaps we can borrow from hackage-server and use 'Content-MD5' headers? This might be superior to expire headers.

# Programming (in general)

- English mode
    i. Get predictive completion
    ii. String syntax highlighting?
    iii. English indenting - implement visual-syntactic text formatting ([VSTF](http://www.readingonline.org/articles/r_walker/)) in Haskell. Possibly using <http://www.cs.chalmers.se/~aarne/GF/doc/tutorial/gf-tutorial2.html#toc10>. Or perhaps some other Haskell library <http://www.haskell.org/haskellwiki/Applications_and_libraries/Linguistics>.
- Programming challenges: [Sphere classical problems](http://www.spoj.pl/problems/classical/), [Project Euler](http://projecteuler.net/), and [99 Haskell Problems](http://haskell.org/haskellwiki/H-99:_Ninety-Nine_Haskell_Problems) (got to 11).
- Read [_All About Monads_](http://www.haskell.org/all_about_monads/html/index.html)
- SICP in Scheme & Haskell; [full text](http://mitpress.mit.edu/sicp/), videos (downloaded), some [solutions in Haskell](http://www.codepoetics.com/wiki/index.php?title=Topics:SICP_in_other_languages) (and other languages), [useful blog posts](http://eli.thegreenplace.net/category/programming/lisp/sicp/)
- There's also [_Structure and Interpretation of Classical Mechanics_](http://mitpress.mit.edu/SICM/); is that best done before or after?

## Mnemosyne plugins:
- Spell-checker for adding cards
- Metadata adder: in comment tags, add current date.
- Per-category 'vice-versa' setting

# General
- Learn French: [FSI course materials](http://www.fsi-language-courses.com/French.aspx), [French wikibook](https://secure.wikimedia.org/wikibooks/en/wiki/French/Contents), [Mnemosyne decks](http://www.mnemosyne-proj.org/taxonomy/term/19)
