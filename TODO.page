<!-- -*- mode: markdown; -*-
When:  Time-stamp: "2010-09-18 18:43:28 gwern"
-->

# Haskell
## Packaging
- Cabalize & upload GF <http://www.cs.chalmers.se/~aarne/GF/>, <http://www.cs.chalmers.se/~aarne/GF/index.html>
- BNF Converter <http://www.cs.chalmers.se/Cs/Research/Language-technology/BNFC/>
- Functional Morphology <http://www.cs.chalmers.se/~markus/FM/>
- WASH <http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/>: HTML and MAIL look particularly useful.
- <http://www.eyrie.org/~zednenem/2004/07/26/hsce>
- <http://www.cs.chalmers.se/~bringert/darcs/>
- <http://www.cs.waikato.ac.nz/Research/fm/amuzed.html>
- Work my way backwards in time from [News/2006](!Hawiki)
- Buddha is old; see if there is a darcs: <http://www.cs.mu.oz.au/~bjpop/buddha>
-  <http://n-heptane.com/nhlab/repos/haskell-freetype/>
   <http://n-heptane.com/nhlab/repos/haskell-glx/>
- HaRe: <http://www.cs.kent.ac.uk/projects/refactor-fp/hare.html>
- Pivotal: <http://www.cs.kent.ac.uk/projects/pivotal/downloads.html>
- Steal Programmatica's stuff: <http://ogi.altocumulus.org/~hallgren/Programatica/cvs.html> and <http://programatica.cs.pdx.edu/>
- dons says track down everything by Mark Jones <http://web.cecs.pdx.edu/~mpj/>
- <http://mail.cs.uu.nl/mailman/listinfo/hut> <https://svn.cs.uu.nl:12443/repos/uust-repo/uuagc/trunk/>
- Hazakura: <http://web.archive.org/web/20061012042957/http://www.city5.org/haskellprog/hazakura/> & <http://haskell.org/pipermail/haskell/2006-April/017901.html>
- Petri nets: <http://www.cs.kent.ac.uk/people/staff/cr3/HCPN/>
- 'Frob - an Embedded Domain Specific Language for controlling robots. It is built using the principals of Functional Reactive Programming, as developed by Conal Elliott for the Fran animation system. The current incarnation of Frob is part of the Yampa FRP system.'
- PUre: <http://wiki.di.uminho.pt/twiki/bin/view/Research/PURe/UsingCVS>
- <http://tothepowerofdisco.com/repo/HaskellLibraries/>
- <http://www.cs.kent.ac.uk/people/staff/cr3/toolbox/haskell/FunWorlds/>
- <http://programatica.cs.pdx.edu/House/>
- <http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/Haskell2LaTeX/>
- <http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/Fraskell/> (is this too old?)
- <http://research.microsoft.com/users/daan/ddata.html> (are these already included in Hackage'd libraries?)
- everything on <http://repetae.net/computer/>.
- <http://www.cs.york.ac.uk/fp/darcs/>
- <http://www.cs.york.ac.uk/fp/software.php>
- <http://cdsmith.twu.net/demos/haskell.html>
- <http://www.cs.uu.nl/wiki/Ehc/WebHome>
- RDF stuff: <http://www.ninebynine.org/Software/HaskellRDF/RDF/Harp/>
- cabalize <http://homepages.cwi.nl/~tromp/cl/cl.html>
- <http://www.haskell.org/hdirect/> too obsolete?
- <https://datura.dylex.net:9947/src/> (particular ztail, set, and Joy compiler; maybe libraries too)
- <http://wxhaskell.sourceforge.net/applications.html>

## General

- Extend [Simple unix tools](!Hawiki) to include more coreutils and maybe QuickCheck tests, and merge into HSH's ShellEquivs. Is there any useful merger of [HSH](http://software.complete.org/software/projects/show/hsh), and [Language.Sh/ShSh](http://code.haskell.org/shsh/)
- look for vector graphics libraries for Haskell; think about cloning DEFCON
- Translate the Lisp from _Metamagical Themas_ into Haskell
- Look into Test.IOSpec <http://www.cs.nott.ac.uk/~wss/repos/IOSpec/>
- Conjure has Int problems on >2gig files - hSeeks on an Int
- Split out Cpuperf's Sudo monad and make safer
- Clean up the SHA1 mess:
    i. Ginsu: module SHA1 (sha1,  sha1ShowHash, sha1String, sha1HashToBytes)
    ii. HAppS: Kind of similar to Ginsu?
    iii. Conjure: BSD FFI, module Conjure.Utils.SHA1 (sha1 :: ByteString -> ByteString)
    iv. jhc: based on Igloo's original - module Util.SHA1 (sha1String,sha1file,sha1Bytes,hashToBytes,sha1Handle,ABCDE(..),Hash,emptyHash) where
- de-haskell98 everything; [Hackage list](http://bifunctor.homelinux.net/~roel/cgi-bin/hackage-scripts/revdeps/haskell98-1.0.1.1);
    - ./haskelldb/driver-wx/haskelldb-wx.cabal
    - ./haskelldb/driver-dynamic/haskelldb-dynamic.cabal
    - ./easyvision/cabal/patrec/patrec.cabal
    - ./easyvision/cabal/imagproc/imagproc.cabal
    - ./graphicsFormats/graphicsFormats.cabal
    - ./ghc/libraries/Cabal/tests/systemTests/twoMains/test.cabal
    - ./ghc/libraries/Cabal/tests/systemTests/wash2hs/wash2hs.cabal
    - ./ghc/libraries/haskell98/haskell98.cabal
    - ./ghc/utils/ghc-pkg/ghc-pkg.cabal
    - ./ghc/utils/hsc2hs/hsc2hs.cabal
    - ./ghc/utils/hpc/hpc-bin.cabal
    - ./lhc/lhc.cabal
    - ./nehe-tuts/nehe-tuts.cabal
    - ./haskellfm/FileManager.cabal
    - ./hera/prelude/hera-prelude.cabal
    - ./hera/hera.cabal
    - ./hera/ajaxgui/hera-ajaxgui.cabal
    - ./hera/engine/hera-engine.cabal
    - ./hybrid/hybrid.cabal
    - ./hexpat/hexpat.cabal
    - ./accelerate/accelerate.cabal
    - ./ivor/ivor.cabal
    - ./gplib/GPLib.cabal
    - ./hopes/hopes.cabal
    - ./flm/FermatsLastMargin.cabal
    - ./flm/FLM.cabal
    - ./haxml/HaXml.cabal
- Remove [Data.Map.map](!Hoogle); see [original](http://www.mail-archive.com/haskell-cafe@haskell.org/msg22115.html) [email thread](http://old.nabble.com/Why-the-Prelude-must-die-td9646480.html) and the GHC [bug report](http://hackage.haskell.org/trac/ghc/ticket/1249).

## Pandoc
- Write up what LaTeX Pandoc does understand; this can be found out by looking through the tests/
     figure out how the new TeXmath figures in
- Replace Pandoc's shell scripts with Haskell scripts

## XMonad
- Look through my collection of XMonad configuration files. What can be done in XMonad core and XMonadContrib to simplify them?
- XMonad.WindowGo and WindowBring could use quite a bit of refactoring and generalizing.
- Hlint XMC
- Run 'sim_text -d `find XMonadContrib/XMonad`' on XMC

## Darcs
- Add --pager option to 'darcs changes' --this is a current [bug report](http://bugs.darcs.net/issue1303)
- Look into darcswatch - can it be made more memory-efficient and usable on haskell.org?

## Yi
- Needs more syntax highlighting modes, and modes in general. I particularly need
     i. Markdown mode
     ii. Shell mode^[Needed for the many configuration files which use that style]
     iii. Lisp mode^[If I could switch completely from Emacs, this wouldn't be so important.]
     iv. Wiki markup (MediaWiki specifically) mode
- [longlines-mode](http://www.gnu.org/software/emacs/manual/html_node/emacs/Longlines.html)[](http://www.emacswiki.org/emacs/LongLines). Absolutely crucial for editing documents that use long lines (such as Markdown or Wikipedia articles). Yi currently displays longlines by wrapping them at the end of the terminal, which both looks ugly and is very hard to navigate or work with.
- [Macros](http://code.google.com/p/yi-editor/issues/detail?id=89). Obviously. If you don't understand why this is a must-have, then you don't understand text editing.
- Spellcheck. See macros - a basic feature. (And ideally a realtime spellcheck, like flyspell; but I could probably live with a manually invoked spellchecker.)
- Persistent state: Yi should remember my previously-opened files, my killring, the last position of the point in a buffer/file etc. Emacs provides this [session](http://www.phys.ufl.edu/docs/emacs/emacs_423.html), and I find it very convenient.

## Gitit

- Caching needs improvements. Perhaps we can borrow from hackage-server and use 'Content-MD5' headers? This might be superior to expire headers.

# Programming (in general)

- English mode
    i. Get predictive completion
    ii. String syntax highlighting?
    iii. English indenting - implement visual-syntactic text formatting ([VSTF](http://www.readingonline.org/articles/r_walker/)) in Haskell (appears to've been commercialized as [LiveInk](http://www.liveink.com/)). Possibly using <http://www.cs.chalmers.se/~aarne/GF/doc/tutorial/gf-tutorial2.html#toc10>. Or perhaps some other Haskell library [Applications and libraries/Linguistics](!Hawiki).
- Programming challenges: [Sphere classical problems](http://www.spoj.pl/problems/classical/), [Project Euler](http://projecteuler.net/), and [99 Haskell Problems](!Hawiki) (got to 11).
- Read [_All About Monads_](http://www.haskell.org/all_about_monads/html/index.html)
- [_How to Design Programs_](http://www.htdp.org/2003-09-26/); another Scheme textbook
- There's also [_Structure and Interpretation of Classical Mechanics_](http://mitpress.mit.edu/SICM/); is that best done before or after SICP?
- [Learn Prolog](http://www.learnprolognow.org/)[](http://www.amzi.com/AdventureInProlog/) - important paradigm; knowing Prolog, I can do this textbook on [partial evaluation/Futamura projections](http://www.itu.dk/people/sestoft/pebook/)
- Write a clone of [Zendo (game)](!Wikipedia). It looks fun and doable, and doing it well would draw on all sorts of GUI and AI techniques. [Zendo wiki](http://www.icehousegames.org/wiki/index.php?title=Zendo), [online version](http://superdupergames.org/povray/), [general page](http://www.koryheath.com/games/zendo); [automated analysis of Bongard problems](http://www.foundalis.com/res/diss_research.html) (apparently a very similar problem); [rule generator](http://www.geocities.com/~karlvonl/Zendomizer.html)
- Learn TeX: <http://en.wikipedia.org/wiki/Help:Formula>, <http://www.tug.org.in/tutorials.html>, <http://www.math.harvard.edu/texman/>, <http://sip.clarku.edu/tutorials/TeX/>
- Learn Java: [Sun's tutorials](http://java.sun.com/docs/books/tutorial/), [JR's tutorials](http://home.cogeco.ca/~ve3ll/jatutor0.htm); [JavaBat](http://www.javabat.com/)? Don't forget local copy of _Thinking in Java_

## Lip reading website
As far as I can tell, there is no free resource for learning how to [lip read](!Wikipedia), much less free online resources.

Learning to lip read is basically:

1. watch a video with obscured audio
2. guess what you think they said
3. be corrected
4. go to #1

This is eminently doable as a website: YouTube for hosting videos, [Amazon Mechanical Turk](!Wikipedia) or similar services for generating Free videos, and perhaps a [SRS algorithm](!Wikipedia "Spaced repetition") for scheduling periodic reviews videos of particular words or sentences.

Lip reading is useful to know. There are roughly [20 million](http://gri.gallaudet.edu/Demographics/factsheet.html#Q1) people in the US with hearing issues and as the [Baby Boomers](!Wikipedia) age and lose hearing, many will want to learn; estimates of Baby Boomers who will have any degree of hearing loss range from 20-60%. See:
- <http://www.hearinglossweb.com/Issues/Identity/boom/boom.htm>
- <http://www.hearform.com/articles/hearing_loss_baby_boomers.htm>
- <http://www.southalabama.edu/alliedhealth/speechandhearing/ramkissoon/AUD643_Aging/baby_boomer_survey_04.pdf>
- <http://www.healthyhearing.com/articles/45443-hearing-loss-baby-boomers>
- <http://archives.cnn.com/2000/HEALTH/aging/04/19/hearing.loss.wmd/index.html>

The small industry of lip reading and the international scattering of lip reading classes shows that people will pay hundreds of dollars and go places to learn it.

#### Costs

Optimistically, one-time >100$ for content, 20$ / month then on, and a substantial time investment in putting together a site and a process for acquiring or creating video.

##### Technical
###### Hosting

Assuming videos are hosted on YouTube or [Amazon S3](!Wikipedia), the website would require extremely little bandwidth and accommodate >1000 users at ~20$ a month:

Assume a webpage requires 100KB to be loaded (very pessimistic), and that a user spends 1 hour a day using the website (30 hours a month), going to a new page every minute. That user will use $100\text{KB} \times (30 \times 60)$, or 180000KB, or 180MB of bandwidth. [Linode's](http://www.linode.com/) cheapest offering at $20/month pays for 200GB of bandwidth; $\frac{200\text{GB}}{180\text{MB}}$ = 1112 users. A domain name costs ~$10 a year, or ~$1 a month.

More reasonable would be assuming 10KB per pageload, and 10 hours a month, cutting the per-user bandwidth down to $10 \times 10 \times 60$, or 6MB, and assuming fewer than 1000 users; then hosting could be even cheaper. [DreamHost](http://www.dreamhost.com/hosting.html) is known for screwing over its more-demanding customers, but should be reliable enough here; their hosting is $9 a month.

###### Coding

Obviously a site custom-made for lip reading & very user-friendly doesn't exist. I'd have to code one or reuse some framework, though offhand I don't know of any really suited for the task. It'd be a big coding task - at least dozens of hours to learn the specific technologies and build a prototype. But then, I can't really count my own time as a cost - I'd just spend the time reading elsewise.

##### Marketing

Unknown. These sorts of sites seem to do best with word of mouth marketing, so who knows? Maybe just time.

##### Content

The content is the wildcard. There are a couple possible sources:

- There's a cottage industry of books and occasional CDs/DVDs, whose copyright obviously would be far too expensive to purchase.
- Hiring professionals to make lip movements also is obviously right out. To make it worth their while and to get at least 10 hours of material would take thousands of dollars.
- Online freelancing sites. I have a theory that one doesn't *want* professionals because one intends to use lip reading in real life, to read the lips of the 'amateurs' one interacts with.
     - I mentioned Mechanical Turk, but that may not be appropriate; many Turkers do not have cameras or webcams, and it may not be doable to ask them to submit videos through Amazon, but Turkers could definitely be used to verify that the person in a clip is saying the things they are supposed to say. (This would cost ~10¢ per review, and usually one double-checks with multiple Turkers, so 20¢ a clip.)
    - Other freelancing sites like guru.com list video/photo people working for $20-40 an hour. I figure that means that amateurs in both department will be no more than half that, $10/hour. 10 hours of content then would be ~$100.

#### Revenue

Ads, obviously. A competitor would be lipreading.com; so that's a reasonable starting point. With zero effort at doing anything other than selling a DVD, some estimates of its ad revenue are [44¢](http://www.cubestat.com/www.lipreading.com) to [$2.22](http://www.websiteoutlook.com/www.lipreading.com) a day. At hosting costs of $21 a month or <75¢ a day, the site could at least pay its on-going expenses.

#### Links
Random links that may be of interest:

- <http://deafness.about.com/cs/communication/a/lipreading.htm>
- <http://www.hearinglossweb.com/Issues/OralCommunications/Strategies/sphrd/allen.htm>
- <http://www.medicinenet.com/script/main/art.asp?articlekey=105489>
- <http://healthlibrary.brighamandwomens.org/RelatedItems/6,630858>
- <http://www.lipread.com.au/Products.html>
- <http://www.bellaonline.com/subjects/2664.asp>
- <http://www.deafcando.org.au/index.php?/deafcando/services/C81/>
- <http://www.adcohearing.com/bvs_hear_loss.html>


## Mnemosyne plugins:
- Spell-checker for adding cards
- Metadata adder: in comment tags, add current date.
- Per-category 'vice-versa' setting

# General
- Look into throwing knives as a supplementary hobby to archery
- Math [notes](http://tutorial.math.lamar.edu/)
- Compile a [_Lexicon Urthus_](http://www.siriusfiction.com/lexicon.html) but for the [_Long Sun_](!Wikipedia "The Book of the Long Sun") & [_Short Sun_](!Wikipedia "The Book of the Short Sun") series instead; focusing particularly on the [thieves' cant](!Wikipedia) in it. Resources:
     - <http://www.fromoldbooks.org/NathanBailey-CantingDictionary/transcription.html>
     - <http://www.gutenberg.org/ebooks/5402>
     - <http://gutenberg.net.au/ebooks06/0600111.txt>
     - <http://www.gutenberg.org/dirs/etext04/dcvgr10.txt>
- Learn statistics: <http://oli.web.cmu.edu/openlearning/forstudents/freecourses/statistics>, <http://ipsur.r-forge.r-project.org/book/>
- learn natural deduction: <http://proofweb.cs.ru.nl/login.php>

## Devices
- A direction sensor belt (a ring of vibrators around one's waist; the one closest to North buzzes gently). See the [_Wired_](http://www.wired.com/wired/archive/15.04/esp.html) article on it, and a [2009 article](http://hplusmagazine.com/articles/enhanced/my-new-sense-organ) describing Sensebridge's Northpaw product  The [feelSpace](http://feelspace.cogsci.uni-osnabrueck.de/en/technology_01.html) homepage is here. There is a thread on [Hackers News](http://news.ycombinator.com/item?id=609983) about building one's own; but [these people](https://bandgap.rsnsoft.com/mediawiki/index.php/Compass_Belt) have apparently finished one. Here's a [version of the belt](http://www.exothermia.net/monkeys_and_robots/2009/02/04/on-the-haptic-compass/) made using [Arduino](!Wikipedia). There's a quasi-commercial version available for $119-214 from [Sensebridge](http://sensebridge.net/projects/northpaw) ([video](http://vimeo.com/groups/45234/videos/11912761)), intended for wearing on one's ankle (the original ankle-based project is ["Noisebridge"](https://www.noisebridge.net/wiki/Compass_Vibro_Anklet). And then there's a [_hat_](https://www.noisebridge.net/wiki/Compass_Vibro_Anklet) (also using Arduino)! I think most approaches are just a little baroque; it might make more sense to have each vibrator be independent - with a vibrator, a compass, and a battery. After all, each one should be able to know independently of the others whether it is facing North or not.
     Parts:
     - http://www.imagesco.com/catalog/DigitalCompass/DigitalCompass.html
     - http://www.imagesco.com/articles/1490/01.html
     - http://www.imagesco.com/kits/digital-navigation-boards.html
     Tutorials:
     - http://www.sparkfun.com/commerce/tutorials.php
- In the same vein as the feelSpace belt, it might be interesting to build a belt that vibrates in the direction of an desired object or location. Possible uses: in a library, it could buzz in the direction of a desired call #. Would be a cool project, anyway!
- buy a Zeo? <http://www.myzeo.com/>