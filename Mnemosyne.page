> "Most people find the concept of programming obvious, but the doing impossible."^[Alan J. Perlis, ["Epigrams in Programming"](http://www.cs.yale.edu/quotes.html)]

One of the most fruitful areas of computing is making up for human frailties. They do arithmetic perfectly because we can't^["One does not learn computing by using a hand calculator, but one can forget arithmetic." Perlis, _ibid._]. They remember terabytes because we'd forget. They make the best calendars, because they always check what there is to do today.

We use any number of such [neuroprosthetic](!Wikipedia)s, but there are always more to be discovered. They're worth looking for because they are so valuable: a shovel is much more effective than your hand, but a [power shovel](!Wikipedia) is orders of magnitude better than both - even if it requires training and expertise to use.

# Spacing effect

My current favorite prosthesis is the class of software that exploits the [spacing effect](!Wikipedia), a centuries-old observation in cognitive psychology, to achieve results in studying or memorization much better than conventional student techniques[^efficiency].

The spacing effect essentially says that if you have a question ("What is the fifth letter in this random sequence you learned?"), and you can only study it, say, 5 times, then your memory of the answer ('e') will be strongest if you spread your 5 tries out over a long period of time - days, weeks, and months. One of the worst things you can do is blow your 5 tries within a day or two. You can think of the 'forgetting curve' as being like a chart of radioactive half-lives: each review bumps your memory up in strength 50% of the chart, say, but review doesn't do very much in the early days because the memory simply hasn't decayed very much!^[For a graphical representation of this sawtooth effect, see [page 2](http://www.wired.com/medtech/health/magazine/16-05/ff_wozniak?currentPage=2) of Wolf 2008.]

Even better, it's known that [active recall](!Wikipedia) is a far superior method of learning than simply passively being exposed to information.[^mapping]

A graphic might help; imagine here one can afford to review a given piece of information a few times (one is a busy person). By looking at the odds we can remember the item, we can see that cramming wins in the short term, but unexercised memories decay so fast that after not too long spacing is much superior[^img]:

![Massed versus spaced](images/spaced-repetition-forgetting-curves.png)

## If you're so good...

Of course, the latter strategy (cramming) is precisely what students do. They cram the night before the test, and a month later can't remember anything. So why do people do it? (I'm not innocent myself.)

Because it does work, sort of. Cramming is a trade-off: you trade a strong memory now for no memory later. And tests are usually of all the new material, with occasional old questions, so this strategy pays off! That's the damnable thing about it - its memory longevity & quality are, in sum, less than that of spaced repetition, but cramming delivers its goods *now*. So cramming is a rational, if short-sighted, response.

That explains why it's an uncommon studying technique: the pay-off is long-term and unobvious. It doesn't help that it's pretty difficult to figure out *when* one should review - the optimal point is when you're just about to forget about it, but that's the kicker: if you're just about to forget about it, how are you supposed to remember to review it? You only remember to review what you remember, and what you already remember isn't what you need to review![^wired1]

The paradox is resolved by letting a computer handle all the calculations. We can thank Ebbinghaus for investigating in such tedious detail than we can, in fact, program a computer to calculate both the forgetting curve and optimal set of reviews^["Make no mistake about it: Computers process numbers - not symbols. We measure our understanding (and control) by the extent to which we can arithmetize an activity." Perlis, _ibid._]. This is the insight behind [spaced repetition](!Wikipedia) software: ask the same question over and over, but over increasing spans of time. You start with asking it once every few days, and soon the human remembers it reasonably well. Then you expand intervals out to weeks, then months, and then years. Once the memory is formed and dispatched to long-term memory, it needs but occasional exercise to remain hale and hearty^[this exponential expansion is how a SR program can handle continual input of cards: obviously if cards were scheduled at fixed intervals, like every other day, review would soon become quite impossible - I have >8000 items in Mnemosyne, but I don't have time to review 4500 questions a day!] - I remember well the large dinosaurs made of cardboard for my 4^th^ or 5^th^ birthday, or the tunnel made out of boxes, even though I recollect them once or twice a year at most.

## Using it

One doesn't need to use SuperMemo, of course; there are plenty of free alternatives. I like [Mnemosyne](!Wikipedia "Mnemosyne (software)") ([homepage](http://www.mnemosyne-proj.org/)) myself - [Free](!Wikipedia "Free software"), packaged for [Ubuntu Linux](!Wikipedia), and quite easy to use.

OK, but what does one do with it? It's a surprisingly difficult question, actually. It's akin to "the  tyranny of the blank page" (or blank wiki); now that I have all this power - a mechanical golem that will never forget and never let me forget whatever I chose to - what do I choose to remember?


### Problems

One common experience of new users to spaced repetition is to add too much stuff - trivialities and things they don't really care about. But they soon learn the curse of [Borges's](!Wikipedia "Jorge Luis Borges") [Funes the Memorious](!Wikipedia). If they don't actually want to learn the material they put in, they will soon stop doing the daily reviews - which will cause reviews to pile up, which will be further discouraging, and so they stop. At least with physical fitness there isn't a precisely dismaying number indicating how far behind you are! But if you have too little at the beginning, you'll have few repetitions per day, and you'll see no obvious benefit from the technique itself - it looks just like boring flash card review.

### What to add

The most difficult task, beyond that of just persisting until the benefits do become obvious, is deciding what's valuable enough to add in. In a 3 year period, one can expect to spend "30-40 seconds"^[["SuperMemo as a new tool increasing the productivity of a programmer. A case study: programming in Object Windows"](http://www.supermemo.com/articles/programming.htm)] on any given item. The long run [theoretical predictions](http://www.supermemo.com/articles/theory.htm) are a little hairier. Given a single item, the formula for daily time spent on it is $\text{time} = \frac{1}{500} \times \text{nthYear}^{-1.5} + \frac{1}{30000}$. So over 20 years, we would spend $t = \frac{1}{500} \times 20^{-1.5} + \frac{1}{3000}$, or `3.556940131083312e-4` minutes a day. To convert it to *total* time over those 20 years, we simply multiply by however many days are in those 20 years, so the relevant Haskell would be:

~~~{.haskell}
((1/500 * 20**(-(1.5))) + 1/3000) * (20*365.25)
~~~

Which evaluates to 2.6 minutes. But maybe [Piotr Woźniak](!Wikipedia "Piotr Woźniak (researcher)") was being optimistic or we're bad at [writing flashcards](http://www.supermemo.com/articles/20rules.htm), so we'll double it to 5 minutes. That's our key rule of thumb that lets us decide what to learn and what to forget: if, over your lifetime, you will spend more than 5 minutes looking something up or will lose more than 5 minutes as a result of not knowing something, then it's worthwhile to memorize it with spaced repetition. 5 minutes is the line that divides trivia from useful data.[^memorizing]

To a lesser extent, one might wonder when one is in a hurry, should one learn something with spaced repetition and with massed? How far away should the tests or deadlines be before abandoning spaced repetition? It's hard to compare since one would need a specific regimens to compare for the crossover point, but for massed repetition, the average time after memorization at which one has a 50% chance of remembering the memorized item seems to be 3-5 days.^[See Stephen R. Schmidt's webpage ["Theories of Forgetting"](http://frank.itlab.us/forgetting/mtsu_forgetting/#II.%20Decay%20Theory), which cites 'Woodworth & Schlosbeg (1961)' when presenting a [log graph](http://frank.itlab.us/forgetting/mtsu_forgetting/woodworth.jpg) of various studies' forgetting curves.] Since there would be 2 or 3 repetitions in that period, presumably one would do better than 50% in recalling an item. 5 minutes and 5 days seems like a memorable enough rule of thumb: 'don't use spaced repetition if you need it sooner than 5 days or it's worth less than 5 minutes'.

I find one of the best uses for Mnemosyne is, besides adding questions relating to class material, to add in words from [A Word A Day](!Wikipedia)^[which neatly addresses the issue of such mailing lists being useless ('who learns a word after just one exposure?').] and [Wiktionary](!Wikipedia), memorable quotes I see^[Mnemosyne in this case constitutes both a way to learn the quotes so I can use them, and a [waste book](!Wikipedia "Notebook (style)"); just the other day I had 3 or 4 apposite quotes for an essay because I had entered them into Mnemosyne months or years ago.], personal information such as birthdays ^[I could never remember my license plate number until I entered 3 or 4 questions [anent](http://www.google.com/search?q=define%3Aanent)'t into Mnemosyne.], and so on. Quotidian uses, but valuable to me.

#### Prospects: extended flashcards

Let's step back for a moment. What are all our flashcards, small and large, doing for us? Why do I have a pair of flashcards for the word 'anent' among many others? I can just look it up.

But look ups take time compared to already knowing something. (Let's ignore the previously discussed 5 minute rule.) If we think about this abstractly in a computer science context, we might recognize it as an old concept in algorithms & optimization discussions - the [space-time tradeoff](!Wikipedia). We trade off lookup time against limited skull space.

The most obvious example is the sort of factual data already given as examples - we might one day need to know the average annual rainfall in Honolulu or Austin, but it would require too much space to memorize such data for all capitals. There are millions of English words, but in practice any more than 100,000 is excessive.

Less obvious is a sort of procedural knowledge. An extreme form of space-time tradeoffs in computers is when a computation is replaced by pre-calculated constants. We could take a math [function](!Wikipedia "Function (mathematics)") and calculate its output for each possible input. Usually such a [lookup table](!Wikipedia) of input to output is really large. Think about how many entries would be in such a table for all possible integer multiplications between 1 and 1 billion. But sometimes the table is really small (like binary Boolean functions) or small (like trigonometric tables) or very large but still useful ([rainbow table](!Wikipedia)s usually start in the gigabytes and easily reach terabytes).

Given an infinitely large lookup table, we could replace *completely* the skill of, say, addition or multiplication by the lookup table. No computation. The space-time tradeoff taken to the extreme of the space side of the continuum. (We could go the other way and define multiplication or addition as the very slow computation which doesn't know any specifics like the [multiplication table](!Wikipedia) - as if every time you wanted to add $2+2$ you had to count on 4 fingers.)

So suppose we were children who wanted to learn multiplication. SRS and Mnemosyne can't help because multiplication is not a specific factoid? The space-time tradeoff shows us that we can de-proceduralize multiplication and turn it partly into factoids. It wouldn't be hard for us to write a quick script or macro to generate, say, 500 random cards which ask us to multiply AB by XY, and import them to Mnemosyne.^[Presumably one would immediately give them all some high grade like 5 to avoid suddenly having a daily load of 500 cards for a while.]

After all, which is your mind going to do - get good at multiplying 2 numbers (generate on-demand), or memorize 500 different multiplication problems ([memoize](!Wikipedia))? From my experience with multiple subtle variants on a card, the mind gives up after just a few and falls back on a problem-solving approach
- which is exactly what one wants to exercise, in this case. Congratulations; you have done the impossible.

From a software engineering point of view, we might want to modify or improve the cards, and 500 snippets of text would be a tad hard to update. So coolest would be a 'dynamic card'. Add a markup type like `<eval src="">`  , and then Mnemosyne feeds the `src` argument straight into the Python interpreter, which returns a [tuple](!Wikipedia) of the question text and the answer text. The question text is displayed to the user as usual, the user thinks, requests the answer, and grades himself.

So for multiplication, the dynamic card would get 2 random integers, print a question like 'x * y = ?' and then print x*y as the answer. Every so often you would get a new multiplication question, and as you get better at multiplication, you see it less often - exactly as you should.

This approach generalizes to anything you can generate random problems of or have large databases of examples of. For example, maybe you are studying Go and are interested in learning [life-and-death positions](!Wikipedia "Life and death"). Those are things that can be generated by computer Go programs, or fetched from places like <http://www.goproblems.com/>. For even more examples, Go is rotationally invariant - the best move remains the same regardless of which way the board is oriented and since there is no canonical direction for the board (like in chess) a good player ought to be able to play the same no matter how the board looks - so each specific example can be mirrored in 3 other ways. Or one could test one's ability to 'read' a board by writing a dynamic card which takes each example board/problem and adds some random pieces as long as some go-playing program like [GNU Go](!Wikipedia) says the best move hasn't changed because of the added noise.

One could learn an awful lot of things this way. Programming languages could be learned this way - someone learning [Haskell](!Wikipedia "Haskell (programming language)") could take all the functions listed in the Prelude or his Haskell textbook, and ask [QuickCheck](!Wikipedia) to generate random arguments for the functions and ask the [GHC](!Wikipedia "Glasgow Haskell Compiler") interpreter `ghci` what the function and its arguments evaluate to. Games other than go, like chess. A fair bit of mathematics. If the dynamic card has Internet access, it can pull down fresh questions from an [RSS feed](!Wikipedia) or just a website; this functionality could be quite useful in a foreign language learning context with every day bringing a fresh sentence to translate or another exercise.

Even though these things seem like 'skills' and not 'data'!

### The workload

On average, I add 3 or 4 questions a day, which combined with my particular memory, means I usually must review about 90 or 100 items a day (out of the total 8000). This takes about 20 minutes, which is not too bad. I expect the time is expanded a bit by the fact that early on, my formatting guidelines were still being developed, and I hadn't the full panoply of categories I do not - so every so often in a review I must stop and do some editing.

# Popularity

----------------------------------------------------------------------------------------
 Metric[^date]       Mnemosyne             Anki                  iSRS            AnyMemo
---------------    -------------------- ----------       --------------    ------------------
 Homepage Alexa    [274k][]             [91k][]                            [2,144k][][^alexa]

 ML/forum members  [459][]              [3949][]/[138][] [114][]           [103][]

 Ubuntu installs   [7k][]               [9k][]

 Debian installs   [160][]              [355][]

 Arch votes        [84][]               [96][]

 iPhone ratings    Unreleased[^imnemo]  [179][]          [68][]

 Android ratings   [18][]               [592][]                            [784][]

 Android installs  [100-500][]          [10-50k][]                         [10-50k][FANTASTIC]

-----------------------------------------------------------------------------------------

<!-- These are all the above links, in reading order -->

[274k]: http://www.alexa.com/siteinfo/http%3A%2F%2Fmnemosyne-proj.org
[91k]: http://www.alexa.com/siteinfo/http%3A%2F%2Fankisrs.net#
[2,144k]: http://www.alexa.com/siteinfo/http%3A%2F%2Fanymemo.org
[459]: http://groups.google.com/group/mnemosyne-proj-users
[3949]: http://groups.google.com/group/ankisrs/
[138]: https://groups.google.com/forum/?fromgroups#!forum/ankisrs-users
[114]: http://groups.google.com/group/isrs-support
[103]: http://anymemo.org/forum/
[7k]: http://popcon.ubuntu.com/universe/by_inst
[9k]: http://popcon.ubuntu.com/unknown/by_inst
[160]: http://qa.debian.org/popcon.php?package=mnemosyne
[355]: http://qa.debian.org/popcon.php?package=anki
[84]: http://aur.archlinux.org/packages.php?ID=13628
[96]: http://aur.archlinux.org/packages.php?ID=14403
[179]: http://itunes.apple.com/us/app/ankisrs/id373493387
[68]: http://itunes.apple.com/app/isrs-free/id332350042
[18]: https://market.android.com/details?id=org.tbrk.mnemododo
[592]: https://market.android.com/details?id=com.ichi2.anki
[784]: https://market.android.com/details?id=org.liberty.android.fantastischmemo
[100-500]: https://market.android.com/details?id=org.tbrk.mnemododo
[10-50k]: https://market.android.com/details?id=com.ichi2.anki
[FANTASTIC]: https://market.android.com/details?id=org.liberty.android.fantastischmemo

[^date]: All numbers from 18 March 2011.

SuperMemo doesn't fall under the same ratings, but it has sold in the hundreds of thousands over its 2 decades:

> "Biedalak is CEO of SuperMemo World, which sells and licenses Wozniak's invention. Today, SuperMemo World employs just 25 people. The venture capital never came through, and the company never moved to California. About 50,000 copies of SuperMemo were sold in 2006, most for less than $30. Many more are thought to have been pirated."^[[_Wired_](http://www.wired.com/medtech/health/magazine/16-05/ff_wozniak?currentPage=5)]

It seems safe to estimate the combined market-share of Anki, Mnemosyne, iSRS and other SRS apps at somewhere under 50,000 users (making due allowance for users who install multiple times, those who install and abandon it, etc.). Relatively few users seem to have migrated from SuperMemo to those newer programs, so it seems fair to simply add that 50k to the other 50k and conclude that the worldwide population is somewhere around (but probably under) 100,000.

[^alexa]: Smaller is better.
[^imnemo]: ["For Mnemosyne 2.x, Ullrich is working on an official Mnemosyne iPhone client which will have very easy syncing."](http://groups.google.com/group/mnemosyne-proj-users/browse_frm/thread/5bbe0fceaef5dab5/83b6f215c918771f)

# Where was I going with this?

Nowhere, really. Mnemosyne/SR software in general are just one of my favorite tools: it's based on a famous effect[^proudest] discovered by science, and it exploits it very elegantly[^me] and usefully. It's a testament to the Enlightenment ideal of improving humanity through reason and overcoming our human flaws; the idea of SR is seductive in its mathematical rigor[^splendor]. In this age where so often the ideal of 'self-improvement' and progress are decried, and gloom are espoused by even the common people, it's really nice to just have a small example like this in one's daily life, an example not yet so prosaic and boring as the lightbulb.

# See also

In the course of using Mnemosyne, I've written a number of scripts to generate repetitively varying cards.

- [mnemo.hs](haskell/mnemo.hs) will take any newline-delimited chunk of text, like a poem, and generates to  every possible [Cloze deletion](!Wikipedia); that is, a ABC poem will become 3 questions: \_BC/ABC, A\_C/ABC, AB\_C/ABC
- [mnemo2.hs](haskell/mnemo2.hs) works as above, but is more limited and is intended for long chunks of text where mnemo.hs would cause a combinatorial explosion of generated questions; it generates a subset: for ABCD, one gets \_\_CD/ABCD, A\_\_D/ABCD, and AB\_\_/ABCD (it removes 2 lines, and iterates through the list).
- [mnemo3.hs](haskell/mnemo3.hs) is intended for date or name-based questions. It'll take input like 'Barack Obama is %47%.' and spit out some questions based on this: 'Barack Obama is \_7./47', 'Barack Obama is 4\_./47' etc.
- [mnemo4.hs](haskell/mnemo4.hs) is intended for long lists of items. If one wants to memorize the list of US Presidents, the natural questions for flashcards goes something like 'Who was the 3rd president?/Thomas Jefferson', 'Thomas Jefferson was the \_rd president./3', 'Who was president after John Adams?/Thomas Jefferson', 'Who was president before James Madison?/Thomas Jefferson'.\
You note there's repetition if you do this for each president - one asks the ordinal position of the item both ways (item -> position, position -> item), what precedes it, and what succeeds it. mnemo4.hs automates this, given a list. In order to be general, the wording is a bit odd, but it's better than writing it all out by hand! (Example output is in the [comments](!Wikipedia "Comment (computer programming)") to the source code).

The reader might well be curious by this point what *my* Mnemosyne database looks like. Said reader may find a not-too-old version of my database exported as XML at [docs/gwern.xml.gz]().

# External links

- ["Teaching linear algebra"](http://bentilly.blogspot.com/2009/09/teaching-linear-algebra.html) (with spaced repetition), by Ben Tilly
- [AJATT table of contents](http://www.alljapaneseallthetime.com/blog/all-japanese-all-the-time-ajatt-how-to-learn-japanese-on-your-own-having-fun-and-to-fluency) -(applying SRS to learning Japanese)

> "Two psychology journals have recently published papers showing that this strategy works, the latest findings from a decades-old body of research. When students study on their own, "active recall" — recitation, for instance, or flashcards and other self-quizzing — is the most effective way to inscribe something in long-term memory.\
    Yet many college instructors are only dimly familiar with that research..." from ["Close the Book. Recall. Write It Down.: That old study method still works, researchers say. So why don't professors preach it?"](http://chronicle.com/free/v55/i34/34a00101.htm); _[The Chronicle of Higher Education](!Wikipedia)_

[^splendor]: See [page 7](http://www.wired.com/medtech/health/magazine/16-05/ff_wozniak?currentPage=7), Wolf 2008

     > "And yet now, as I grin broadly and wave to the gawkers, it occurs to me that the cold rationality of his approach may be only a surface feature and that, when linked to genuine rewards, even the chilliest of systems can have a certain visceral appeal. By projecting the achievement of extreme memory back along the forgetting curve, by provably linking the distant future - when we will know so much - to the few minutes we devote to studying today, Wozniak has found a way to condition his temperament along with his memory. He is making the future noticeable. He is trying not just to learn many things but to warm the process of learning itself with a draft of utopian ecstasy."
[^me]: When I first read of SuperMemo, I had already taken a class in [cognitive psychology](!Wikipedia) and was reasonably familiar with Ebbinghaus's forgetting curve - so my reaction to its methodology was Huxley's: "How extremely stupid not to have thought of that!"
[^proudest]: See [Page 4](http://www.wired.com/medtech/health/magazine/16-05/ff_wozniak?currentPage=4), Wolf 2008:

     > "The spacing effect was one of the proudest lab-derived discoveries, and it was interesting precisely because it was not obvious, even to professional teachers. The same year that Neisser revolted, Robert Bjork, working with Thomas Landauer of Bell Labs, published the results of two experiments involving nearly 700 undergraduate students. Landauer and Bjork were looking for the optimal moment to rehearse something so that it would later be remembered. Their results were impressive: The best time to study something is at the moment you are about to forget it. And yet - as Neisser might have predicted - that insight was useless in the real world."
[^wired1]:  "SuperMemo is based on the insight that there is an ideal moment to practice what you've learned. Practice too soon and you waste your time. Practice too late and you've forgotten the material and have to relearn it. The right time to practice is just at the moment you're about to forget. Unfortunately, this moment is different for every person and each bit of information. Imagine a pile of thousands of flash cards. Somewhere in this pile are the ones you should be practicing right now. Which are they?" Gary Wolf, ["Want to Remember Everything You'll Ever Learn? Surrender to This Algorithm"](http://www.wired.com/medtech/health/magazine/16-05/ff_wozniak), _[Wired Magazine](!Wikipedia)_
[^memorizing]: modulo things where knowing it is useful even if you don't need it very often - it can be a brick in a pyramid of knowledge; cf. [page 3](http://www.wired.com/medtech/health/magazine/16-05/ff_wozniak?currentPage=3) of Wolf:

     > "The problem of forgetting might not torment us so much if we could only convince ourselves that remembering isn't important. Perhaps the things we learn - words, dates, formulas, historical and biographical details - don't really matter. Facts can be looked up. That's what the Internet is for. When it comes to learning, what really matters is how things fit together. We master the stories, the schemas, the frameworks, the paradigms; we rehearse the lingo; we swim in the episteme.\
     > The disadvantage of this comforting notion is that it's false. "The people who criticize memorization - how happy would they be to spell out every letter of every word they read?" asks Robert Bjork, chair of UCLA's psychology department and one of the most eminent memory researchers. After all, Bjork notes, children learn to read whole words through intense practice, and every time we enter a new field we become children again. "You can't escape memorization," he says. "There is an initial process of learning the names of things. That's a stage we all go through. It's all the more important to go through it rapidly." The human brain is a marvel of associative processing, but in order to make associations, data must be loaded into memory."
[^img]: This image is only evocative! I whipped this up in [Inkscape](!Wikipedia) one night; it certainly is not a representation of a real experimental dataset or anything like that.
[^efficiency]: from "The Spacing Effect: A Case Study in the Failure to Apply the Results of Psychological Research" (Frank N. Dempster):

     > "Second, it is remarkably robust. In many cases, two spaced presentations are about twice as effective as two massed presentations (e.g., Hintzman, 1974; Melton, 1970), and the difference between them increases as the frequency of repetition increases (Underwood, 1970)...\
     > The spacing effect was known as early as 1885 when Ebbinghaus published the results of his seminal work on memory. With himself as the subject, Ebbinghaus found that for a single 12-syllable series, 68 immediately successive repetitions had the effect of making possible an errorless recital after seven additional repetitions on the following day. However, the same effect was achieved by only 38 distributed repetitions spread over 3 days. On the basis of this and other related findings, Ebbinghaus concluded that 'with any considerable number of repetitions a suitable distribution of them over a space of time is decidedly more advantageous than the massing of them at a single time" (Ebbinghaus, 1885/1913. p. 89)"

     From [_Psychology: An Introduction_](http://www.psywww.com/intropsych/ch06_memory/spacing_effect.html):

     > "In one practical demonstration of the spacing effect, Bahrick, Bahrick, Bahrick, & Bahrick (1993) showed that retention of foreign language vocabulary was greatly enhanced if practice sessions were spaced far apart. For example, "Thirteen retraining sessions spaced at 56 days yielded retention comparable to 26 sessions spaced at 14 days." In other words, subjects could use _half as many study sessions_, if the study sessions were spread over a time period _four times as long_."
[^mapping]: There are many studies to the effect that active recall is best. Here's one recent study, ["Retrieval Practice Produces More Learning than Elaborative Studying with Concept Mapping"](http://www.sciencemag.org/content/early/2011/01/19/science.1199327.abstract), Karpicke 2011 (covered in [_Science Daily_](http://www.sciencedaily.com/releases/2011/01/110121111216.htm) and the [_NYT_](http://www.nytimes.com/2011/01/21/science/21memory.html)):

    > "Educators rely heavily on learning activities that encourage elaborative studying, while activities that require students to practice retrieving and reconstructing knowledge are used less frequently. Here, we show that practicing retrieval produces greater gains in meaningful learning than elaborative studying with concept mapping. The advantage of retrieval practice generalized across texts identical to those commonly found in science education. The advantage of retrieval practice was observed with test questions that assessed comprehension and required students to make inferences. The advantage of retrieval practice occurred even when the criterial test involved creating concept maps. Our findings support the theory that retrieval practice enhances learning by retrieval-specific mechanisms rather than by elaborative study processes. Retrieval practice is an effective tool to promote conceptual learning about science."
